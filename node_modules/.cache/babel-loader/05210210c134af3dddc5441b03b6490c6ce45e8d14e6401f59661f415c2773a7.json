{"ast":null,"code":"var _jsxFileName = \"/Users/dragosudrea/repos/quiz-react-app/src/components/Simulation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport Timer from './Timer';\nimport SimulationResults from './SimulationResults';\nimport '../styles/Simulation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Simulation = ({\n  allChaptersData,\n  correctAnswersData,\n  onExit\n}) => {\n  _s();\n  const SIMULATION_TIME_MINUTES = 120; // 2 hours\n  const SIMULATION_QUESTIONS_COUNT = 60; // 60 questions\n\n  const [simulationState, setSimulationState] = useState('intro'); // intro, running, completed\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [results, setResults] = useState(null);\n\n  // Prepare simulation questions by selecting questions from each chapter\n  const prepareSimulationQuestions = useCallback(() => {\n    const chaptersData = Object.keys(allChaptersData);\n    const totalChapters = chaptersData.length;\n\n    // Calculate how many questions to take from each chapter\n    // We want to distribute questions evenly among chapters\n    const questionsPerChapter = Math.floor(SIMULATION_QUESTIONS_COUNT / totalChapters);\n    const remainder = SIMULATION_QUESTIONS_COUNT % totalChapters;\n    const selectedQuestions = [];\n    let chapterCounts = {};\n\n    // First, select an equal number of questions from each chapter\n    chaptersData.forEach(chapter => {\n      const chapterQuestions = allChaptersData[chapter];\n\n      // We need to determine how many questions to take from this chapter\n      const questionsToTake = chapter === chaptersData[0] ? questionsPerChapter + remainder // Add remainder to first chapter\n      : questionsPerChapter;\n\n      // Get random indices without replacement\n      const indices = getRandomIndices(chapterQuestions.length, questionsToTake);\n\n      // Select questions using these indices\n      const selectedFromChapter = indices.map(index => ({\n        ...chapterQuestions[index],\n        chapter // Add the chapter info to each question\n      }));\n\n      // Add to our final array\n      selectedQuestions.push(...selectedFromChapter);\n\n      // Track how many we took from each chapter\n      chapterCounts[chapter] = questionsToTake;\n    });\n\n    // Shuffle the combined array to mix questions from different chapters\n    const shuffledQuestions = shuffleArray([...selectedQuestions]);\n    setQuestions(shuffledQuestions);\n    return shuffledQuestions;\n  }, [allChaptersData]);\n\n  // Initialize simulation\n  const startSimulation = () => {\n    const simulationQuestions = prepareSimulationQuestions();\n\n    // Reset states\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setSelectedAnswers([]);\n    setTimeSpent(0);\n    setResults(null);\n\n    // Start the simulation\n    setSimulationState('running');\n  };\n\n  // Handle time expiration\n  const handleTimeExpired = useCallback(() => {\n    finishSimulation();\n  }, []);\n\n  // Calculate results and end simulation\n  const finishSimulation = useCallback(() => {\n    // Calculate results\n    let correctCount = 0;\n    let resultsByChapter = {};\n\n    // Initialize results for each chapter\n    Object.keys(allChaptersData).forEach(chapter => {\n      resultsByChapter[chapter] = {\n        total: 0,\n        correct: 0\n      };\n    });\n\n    // Evaluate each question\n    questions.forEach((question, index) => {\n      var _userAnswers$index;\n      const questionNumber = question.numar;\n      const chapter = question.chapter;\n      const correctAnswer = correctAnswersData[chapter][questionNumber] || \"\";\n      const userAnswer = ((_userAnswers$index = userAnswers[index]) === null || _userAnswers$index === void 0 ? void 0 : _userAnswers$index.join('')) || \"\";\n\n      // Update totals for this chapter\n      resultsByChapter[chapter].total += 1;\n\n      // Check if answer is correct\n      if (userAnswer === correctAnswer) {\n        correctCount++;\n        resultsByChapter[chapter].correct += 1;\n      }\n    });\n\n    // Set the final results\n    setResults({\n      correctCount,\n      resultsByChapter\n    });\n\n    // Mark simulation as completed\n    setSimulationState('completed');\n  }, [questions, userAnswers, correctAnswersData, allChaptersData]);\n\n  // Save answer for current question\n  const saveAnswer = () => {\n    if (selectedAnswers.length === 0) return;\n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: [...selectedAnswers]\n    }));\n\n    // Move to next question\n    if (currentQuestionIndex < questions.length - 1) {\n      goToNextQuestion();\n    }\n  };\n\n  // Navigation\n  const goToNextQuestion = () => {\n    setCurrentQuestionIndex(prev => prev + 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex + 1] || []);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prev => prev - 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex - 1] || []);\n  };\n\n  // Handle answer selection\n  const handleAnswerSelection = letter => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      if (index === -1) {\n        // Add selection and sort\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Remove selection\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n\n  // When the current question changes, load any existing answers\n  useEffect(() => {\n    setSelectedAnswers(userAnswers[currentQuestionIndex] || []);\n  }, [currentQuestionIndex, userAnswers]);\n\n  // Utility functions\n  const getRandomIndices = (max, count) => {\n    const indices = Array.from({\n      length: max\n    }, (_, i) => i);\n    return shuffleArray(indices).slice(0, count);\n  };\n  const shuffleArray = array => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n\n  // Render different states\n  if (simulationState === 'intro') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mod Simulare Examen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Acest mod simuleaz\\u0103 un examen real cu:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [SIMULATION_QUESTIONS_COUNT, \" \\xEEntreb\\u0103ri\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), \" selectate aleatoriu din toate capitolele\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [SIMULATION_TIME_MINUTES, \" minute\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), \" timp disponibil (\", SIMULATION_TIME_MINUTES / 60, \" ore)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Distribu\\u021Bie propor\\u021Bional\\u0103 a \\xEEntreb\\u0103rilor \\xEEntre capitole\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Posibilitatea de a naviga \\xEEntre \\xEEntreb\\u0103ri \\u0219i de a reveni\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Rezultat detaliat la final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"E\\u0219ti preg\\u0103tit s\\u0103 \\xEEncepi?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: startSimulation,\n          children: \"\\xCEncepe Simularea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: onExit,\n          children: \"\\xCEnapoi la Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  }\n  if (simulationState === 'completed') {\n    return /*#__PURE__*/_jsxDEV(SimulationResults, {\n      results: results,\n      totalQuestions: questions.length,\n      timeSpentInSeconds: SIMULATION_TIME_MINUTES * 60 - timeSpent,\n      onRestart: () => setSimulationState('intro'),\n      onExit: onExit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Running state\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questions.length * 100;\n  const isAnswered = !!userAnswers[currentQuestionIndex];\n\n  // Calculate the correct answers from relevant chapter\n  const chapter = currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.chapter;\n  const correctAnswers = chapter ? correctAnswersData[chapter] : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simulation-container\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      initialTimeInMinutes: SIMULATION_TIME_MINUTES,\n      onTimeExpired: handleTimeExpired\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\xCEntrebarea \", currentQuestionIndex + 1, \" din \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${progress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-finish\",\n        onClick: finishSimulation,\n        children: \"Termin\\u0103 simularea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-question\",\n      children: [/*#__PURE__*/_jsxDEV(QuestionDisplay, {\n        question: currentQuestion,\n        selectedAnswers: selectedAnswers,\n        onAnswerSelect: handleAnswerSelection,\n        feedback: {\n          visible: false\n        },\n        correctAnswer: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-status\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-indicator\",\n          children: isAnswered && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"answered-indicator\",\n            children: \"\\u2713 R\\u0103spuns salvat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: goToPreviousQuestion,\n        disabled: currentQuestionIndex === 0,\n        children: \"\\xCEntrebarea anterioar\\u0103\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: saveAnswer,\n        disabled: selectedAnswers.length === 0,\n        children: isAnswered ? 'Actualizează răspunsul' : 'Salvează răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: goToNextQuestion,\n        disabled: currentQuestionIndex === questions.length - 1,\n        children: \"\\xCEntrebarea urm\\u0103toare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(Simulation, \"2Nkfv0ZD2Qf5iAg5mGKmPJLTyKM=\");\n_c = Simulation;\nexport default Simulation;\nvar _c;\n$RefreshReg$(_c, \"Simulation\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","QuestionDisplay","Timer","SimulationResults","jsxDEV","_jsxDEV","Simulation","allChaptersData","correctAnswersData","onExit","_s","SIMULATION_TIME_MINUTES","SIMULATION_QUESTIONS_COUNT","simulationState","setSimulationState","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","selectedAnswers","setSelectedAnswers","timeSpent","setTimeSpent","results","setResults","prepareSimulationQuestions","chaptersData","Object","keys","totalChapters","length","questionsPerChapter","Math","floor","remainder","selectedQuestions","chapterCounts","forEach","chapter","chapterQuestions","questionsToTake","indices","getRandomIndices","selectedFromChapter","map","index","push","shuffledQuestions","shuffleArray","startSimulation","simulationQuestions","handleTimeExpired","finishSimulation","correctCount","resultsByChapter","total","correct","question","_userAnswers$index","questionNumber","numar","correctAnswer","userAnswer","join","saveAnswer","prev","goToNextQuestion","goToPreviousQuestion","handleAnswerSelection","letter","indexOf","newSelected","sort","filter","l","max","count","Array","from","_","i","slice","array","newArray","j","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","totalQuestions","timeSpentInSeconds","onRestart","currentQuestion","progress","isAnswered","correctAnswers","initialTimeInMinutes","onTimeExpired","style","width","onAnswerSelect","feedback","visible","disabled","_c","$RefreshReg$"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/Simulation.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport Timer from './Timer';\nimport SimulationResults from './SimulationResults';\nimport '../styles/Simulation.css';\n\nconst Simulation = ({ \n  allChaptersData, \n  correctAnswersData,\n  onExit \n}) => {\n  const SIMULATION_TIME_MINUTES = 120; // 2 hours\n  const SIMULATION_QUESTIONS_COUNT = 60; // 60 questions\n  \n  const [simulationState, setSimulationState] = useState('intro'); // intro, running, completed\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [results, setResults] = useState(null);\n  \n  // Prepare simulation questions by selecting questions from each chapter\n  const prepareSimulationQuestions = useCallback(() => {\n    const chaptersData = Object.keys(allChaptersData);\n    const totalChapters = chaptersData.length;\n    \n    // Calculate how many questions to take from each chapter\n    // We want to distribute questions evenly among chapters\n    const questionsPerChapter = Math.floor(SIMULATION_QUESTIONS_COUNT / totalChapters);\n    const remainder = SIMULATION_QUESTIONS_COUNT % totalChapters;\n    \n    const selectedQuestions = [];\n    let chapterCounts = {};\n    \n    // First, select an equal number of questions from each chapter\n    chaptersData.forEach(chapter => {\n      const chapterQuestions = allChaptersData[chapter];\n      \n      // We need to determine how many questions to take from this chapter\n      const questionsToTake = chapter === chaptersData[0] \n        ? questionsPerChapter + remainder // Add remainder to first chapter\n        : questionsPerChapter;\n      \n      // Get random indices without replacement\n      const indices = getRandomIndices(chapterQuestions.length, questionsToTake);\n      \n      // Select questions using these indices\n      const selectedFromChapter = indices.map(index => ({\n        ...chapterQuestions[index],\n        chapter // Add the chapter info to each question\n      }));\n      \n      // Add to our final array\n      selectedQuestions.push(...selectedFromChapter);\n      \n      // Track how many we took from each chapter\n      chapterCounts[chapter] = questionsToTake;\n    });\n    \n    // Shuffle the combined array to mix questions from different chapters\n    const shuffledQuestions = shuffleArray([...selectedQuestions]);\n    \n    setQuestions(shuffledQuestions);\n    return shuffledQuestions;\n  }, [allChaptersData]);\n  \n  // Initialize simulation\n  const startSimulation = () => {\n    const simulationQuestions = prepareSimulationQuestions();\n    \n    // Reset states\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setSelectedAnswers([]);\n    setTimeSpent(0);\n    setResults(null);\n    \n    // Start the simulation\n    setSimulationState('running');\n  };\n  \n  // Handle time expiration\n  const handleTimeExpired = useCallback(() => {\n    finishSimulation();\n  }, []);\n  \n  // Calculate results and end simulation\n  const finishSimulation = useCallback(() => {\n    // Calculate results\n    let correctCount = 0;\n    let resultsByChapter = {};\n    \n    // Initialize results for each chapter\n    Object.keys(allChaptersData).forEach(chapter => {\n      resultsByChapter[chapter] = { total: 0, correct: 0 };\n    });\n    \n    // Evaluate each question\n    questions.forEach((question, index) => {\n      const questionNumber = question.numar;\n      const chapter = question.chapter;\n      const correctAnswer = correctAnswersData[chapter][questionNumber] || \"\";\n      const userAnswer = userAnswers[index]?.join('') || \"\";\n      \n      // Update totals for this chapter\n      resultsByChapter[chapter].total += 1;\n      \n      // Check if answer is correct\n      if (userAnswer === correctAnswer) {\n        correctCount++;\n        resultsByChapter[chapter].correct += 1;\n      }\n    });\n    \n    // Set the final results\n    setResults({\n      correctCount,\n      resultsByChapter\n    });\n    \n    // Mark simulation as completed\n    setSimulationState('completed');\n  }, [questions, userAnswers, correctAnswersData, allChaptersData]);\n  \n  // Save answer for current question\n  const saveAnswer = () => {\n    if (selectedAnswers.length === 0) return;\n    \n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: [...selectedAnswers]\n    }));\n    \n    // Move to next question\n    if (currentQuestionIndex < questions.length - 1) {\n      goToNextQuestion();\n    }\n  };\n  \n  // Navigation\n  const goToNextQuestion = () => {\n    setCurrentQuestionIndex(prev => prev + 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex + 1] || []);\n  };\n  \n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prev => prev - 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex - 1] || []);\n  };\n  \n  // Handle answer selection\n  const handleAnswerSelection = (letter) => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      \n      if (index === -1) {\n        // Add selection and sort\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Remove selection\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n  \n  // When the current question changes, load any existing answers\n  useEffect(() => {\n    setSelectedAnswers(userAnswers[currentQuestionIndex] || []);\n  }, [currentQuestionIndex, userAnswers]);\n  \n  // Utility functions\n  const getRandomIndices = (max, count) => {\n    const indices = Array.from({ length: max }, (_, i) => i);\n    return shuffleArray(indices).slice(0, count);\n  };\n  \n  const shuffleArray = (array) => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n  \n  // Render different states\n  if (simulationState === 'intro') {\n    return (\n      <div className=\"simulation-intro\">\n        <h2>Mod Simulare Examen</h2>\n        <div className=\"simulation-info\">\n          <p>Acest mod simulează un examen real cu:</p>\n          <ul>\n            <li><strong>{SIMULATION_QUESTIONS_COUNT} întrebări</strong> selectate aleatoriu din toate capitolele</li>\n            <li><strong>{SIMULATION_TIME_MINUTES} minute</strong> timp disponibil ({SIMULATION_TIME_MINUTES / 60} ore)</li>\n            <li>Distribuție proporțională a întrebărilor între capitole</li>\n            <li>Posibilitatea de a naviga între întrebări și de a reveni</li>\n            <li>Rezultat detaliat la final</li>\n          </ul>\n          <p>Ești pregătit să începi?</p>\n        </div>\n        <div className=\"simulation-actions\">\n          <button className=\"btn btn-primary\" onClick={startSimulation}>\n            Începe Simularea\n          </button>\n          <button className=\"btn btn-secondary\" onClick={onExit}>\n            Înapoi la Quiz\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (simulationState === 'completed') {\n    return (\n      <SimulationResults\n        results={results}\n        totalQuestions={questions.length}\n        timeSpentInSeconds={SIMULATION_TIME_MINUTES * 60 - timeSpent}\n        onRestart={() => setSimulationState('intro')}\n        onExit={onExit}\n      />\n    );\n  }\n  \n  // Running state\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n  const isAnswered = !!userAnswers[currentQuestionIndex];\n  \n  // Calculate the correct answers from relevant chapter\n  const chapter = currentQuestion?.chapter;\n  const correctAnswers = chapter ? correctAnswersData[chapter] : {};\n  \n  return (\n    <div className=\"simulation-container\">\n      <Timer \n        initialTimeInMinutes={SIMULATION_TIME_MINUTES} \n        onTimeExpired={handleTimeExpired} \n      />\n      \n      <div className=\"simulation-header\">\n        <div className=\"progress-info\">\n          <span>Întrebarea {currentQuestionIndex + 1} din {questions.length}</span>\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        <button \n          className=\"btn btn-finish\" \n          onClick={finishSimulation}\n        >\n          Termină simularea\n        </button>\n      </div>\n      \n      {currentQuestion && (\n        <div className=\"simulation-question\">\n          <QuestionDisplay\n            question={currentQuestion}\n            selectedAnswers={selectedAnswers}\n            onAnswerSelect={handleAnswerSelection}\n            feedback={{ visible: false }}\n            correctAnswer=\"\"\n          />\n          \n          <div className=\"question-status\">\n            <div className=\"status-indicator\">\n              {isAnswered && <span className=\"answered-indicator\">✓ Răspuns salvat</span>}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"simulation-navigation\">\n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToPreviousQuestion}\n          disabled={currentQuestionIndex === 0}\n        >\n          Întrebarea anterioară\n        </button>\n        \n        <button \n          className=\"btn btn-primary\" \n          onClick={saveAnswer}\n          disabled={selectedAnswers.length === 0}\n        >\n          {isAnswered ? 'Actualizează răspunsul' : 'Salvează răspunsul'}\n        </button>\n        \n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToNextQuestion}\n          disabled={currentQuestionIndex === questions.length - 1}\n        >\n          Întrebarea următoare\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Simulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}