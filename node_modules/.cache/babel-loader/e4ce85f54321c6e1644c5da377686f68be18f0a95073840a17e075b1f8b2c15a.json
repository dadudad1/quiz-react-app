{"ast":null,"code":"import React,{useState,useEffect}from'react';import{formatTime}from'./finishSimulation';import'../styles/SimulationResults.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SimulationResults=_ref=>{let{results,totalQuestions,timeSpentInSeconds,onRestart,onExit,totalAvailableQuestions=0}=_ref;const{correctCount,resultsByChapter}=results;const score=Math.round(correctCount/totalQuestions*100);// Determine if the simulation was passed (a score of 70% or higher is passing)\nconst isPassed=score>=70;// State for simulation statistics\nconst[simulationStats,setSimulationStats]=useState({testsTaken:0,testsPassed:0,totalQuestionsAnswered:0,last10Tests:[]});// If totalAvailableQuestions is not provided, calculate it\nconst[calculatedAvailableQuestions,setCalculatedAvailableQuestions]=useState(totalAvailableQuestions||0);// Load simulation statistics from localStorage\nuseEffect(()=>{// Load simulation stats\nconst savedStats=localStorage.getItem('simulationStats');if(savedStats){try{const stats=JSON.parse(savedStats);setSimulationStats(stats);}catch(e){console.error('Eroare la încărcarea statisticilor de simulare:',e);}}// Calculate total available questions if not provided as prop\nif(!totalAvailableQuestions){try{// This needs to be coordinated with the total question count in allChaptersData\n// For now, we'll use a calculation based on the chapter results\nconst chaptersTotal=Object.values(resultsByChapter).reduce((total,chapter)=>{// Estimate the total number of questions in the chapter\n// This is a rough estimation, adjust based on your actual data\nconst estimatedChapterTotal=chapter.total*5;// Assuming we're using about 20% of chapter questions\nreturn total+estimatedChapterTotal;},0);setCalculatedAvailableQuestions(chaptersTotal||500);// Fallback to 500 if calculation fails\n}catch(e){console.error('Eroare la calcularea numărului total de întrebări disponibile:',e);setCalculatedAvailableQuestions(500);// Default fallback\n}}},[resultsByChapter,totalAvailableQuestions]);// Use the prop value if available, otherwise use calculated value\nconst finalAvailableQuestions=totalAvailableQuestions||calculatedAvailableQuestions;return/*#__PURE__*/_jsx(\"div\",{className:\"simulation-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"two-column-layout\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-column\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-results\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"results-title\",children:\"Rezultatele Simul\\u0103rii\"}),/*#__PURE__*/_jsxs(\"div\",{className:`score-display ${isPassed?'passed':'failed'}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"score-value\",children:[score,\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"score-label\",children:isPassed?'Promovat!':'Nepromovat'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-label\",children:\"R\\u0103spunsuri corecte:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"summary-value\",children:[correctCount,\" din \",totalQuestions]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-label\",children:\"Timp utilizat:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"summary-value\",children:formatTime(timeSpentInSeconds)})]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"Performan\\u021B\\u0103 pe capitole\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chapter-results\",children:Object.entries(resultsByChapter).map(_ref2=>{let[chapter,data]=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-result\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-header\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Capitolul \",chapter.replace('cap','')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-score\",children:[Math.round(data.correct/data.total*100),\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-detail\",children:[data.correct,\" corecte din \",data.total,\" \\xEEntreb\\u0103ri\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${data.correct/data.total*100}%`}})})]},chapter);})}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:onRestart,children:\"Re\\xEEncepe Simularea\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:onExit,children:\"Ie\\u0219ire din Simulare\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-column\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"stats-summary\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"stats-title\",children:\"Statistici globale\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-box-value\",children:simulationStats.testsTaken}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-box-label\",children:\"Simul\\u0103ri efectuate\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-box-value\",children:simulationStats.testsPassed}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-box-label\",children:\"Simul\\u0103ri promovate\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box-value\",children:[simulationStats.testsTaken>0?Math.round(simulationStats.testsPassed/simulationStats.testsTaken*100):0,\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-box-label\",children:\"Rat\\u0103 de promovare\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box-value\",children:[simulationStats.totalCorrectAnswers||0,/*#__PURE__*/_jsxs(\"span\",{className:\"stat-box-ratio\",children:[\"/\",simulationStats.totalQuestionsAnswered||0]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-box-label\",children:[\"R\\u0103spunsuri corecte\",simulationStats.totalQuestionsAnswered>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"stat-box-percentage\",children:[\"(\",Math.round(simulationStats.totalCorrectAnswers/simulationStats.totalQuestionsAnswered*100),\"%)\"]})]})]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"Ultimele Simul\\u0103ri\"}),simulationStats.last10Tests.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"last-tests-list\",children:simulationStats.last10Tests.map((test,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`test-result ${test.passed?'passed':'failed'}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"test-result-score\",children:[test.score,\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"test-result-details\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[test.correctCount,\" din \",test.totalQuestions,\" corecte\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"test-result-date\",children:new Date(test.date).toLocaleDateString()})]})]},index))}):/*#__PURE__*/_jsx(\"div\",{className:\"no-data\",children:\"Nu exist\\u0103 simul\\u0103ri recente\"})]})})]})});};export default SimulationResults;","map":{"version":3,"names":["React","useState","useEffect","formatTime","jsx","_jsx","jsxs","_jsxs","SimulationResults","_ref","results","totalQuestions","timeSpentInSeconds","onRestart","onExit","totalAvailableQuestions","correctCount","resultsByChapter","score","Math","round","isPassed","simulationStats","setSimulationStats","testsTaken","testsPassed","totalQuestionsAnswered","last10Tests","calculatedAvailableQuestions","setCalculatedAvailableQuestions","savedStats","localStorage","getItem","stats","JSON","parse","e","console","error","chaptersTotal","Object","values","reduce","total","chapter","estimatedChapterTotal","finalAvailableQuestions","className","children","entries","map","_ref2","data","replace","correct","style","width","onClick","totalCorrectAnswers","length","test","index","passed","Date","date","toLocaleDateString"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/SimulationResults.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { formatTime } from './finishSimulation';\nimport '../styles/SimulationResults.css';\n\nconst SimulationResults = ({ \n  results, \n  totalQuestions, \n  timeSpentInSeconds, \n  onRestart, \n  onExit,\n  totalAvailableQuestions = 0\n}) => {\n  const { correctCount, resultsByChapter } = results;\n  const score = Math.round((correctCount / totalQuestions) * 100);\n  \n  // Determine if the simulation was passed (a score of 70% or higher is passing)\n  const isPassed = score >= 70;\n  \n  // State for simulation statistics\n  const [simulationStats, setSimulationStats] = useState({\n    testsTaken: 0,\n    testsPassed: 0,\n    totalQuestionsAnswered: 0,\n    last10Tests: []\n  });\n  \n  // If totalAvailableQuestions is not provided, calculate it\n  const [calculatedAvailableQuestions, setCalculatedAvailableQuestions] = useState(\n    totalAvailableQuestions || 0\n  );\n  \n  // Load simulation statistics from localStorage\n  useEffect(() => {\n    // Load simulation stats\n    const savedStats = localStorage.getItem('simulationStats');\n    if (savedStats) {\n      try {\n        const stats = JSON.parse(savedStats);\n        setSimulationStats(stats);\n      } catch (e) {\n        console.error('Eroare la încărcarea statisticilor de simulare:', e);\n      }\n    }\n    \n    // Calculate total available questions if not provided as prop\n    if (!totalAvailableQuestions) {\n      try {\n        // This needs to be coordinated with the total question count in allChaptersData\n        // For now, we'll use a calculation based on the chapter results\n        const chaptersTotal = Object.values(resultsByChapter).reduce((total, chapter) => {\n          // Estimate the total number of questions in the chapter\n          // This is a rough estimation, adjust based on your actual data\n          const estimatedChapterTotal = chapter.total * 5; // Assuming we're using about 20% of chapter questions\n          return total + estimatedChapterTotal;\n        }, 0);\n        \n        setCalculatedAvailableQuestions(chaptersTotal || 500); // Fallback to 500 if calculation fails\n      } catch (e) {\n        console.error('Eroare la calcularea numărului total de întrebări disponibile:', e);\n        setCalculatedAvailableQuestions(500); // Default fallback\n      }\n    }\n  }, [resultsByChapter, totalAvailableQuestions]);\n  \n  // Use the prop value if available, otherwise use calculated value\n  const finalAvailableQuestions = totalAvailableQuestions || calculatedAvailableQuestions;\n  \n  return (\n    <div className=\"simulation-container\">\n      <div className=\"two-column-layout\">\n        <div className=\"left-column\">\n          <div className=\"simulation-results\">\n            <h2 className=\"results-title\">Rezultatele Simulării</h2>\n            \n            <div className={`score-display ${isPassed ? 'passed' : 'failed'}`}>\n              <div className=\"score-value\">{score}%</div>\n              <div className=\"score-label\">\n                {isPassed ? 'Promovat!' : 'Nepromovat'}\n              </div>\n            </div>\n            \n            <div className=\"results-summary\">\n              <div className=\"summary-item\">\n                <span className=\"summary-label\">Răspunsuri corecte:</span>\n                <span className=\"summary-value\">{correctCount} din {totalQuestions}</span>\n              </div>\n              \n              <div className=\"summary-item\">\n                <span className=\"summary-label\">Timp utilizat:</span>\n                <span className=\"summary-value\">{formatTime(timeSpentInSeconds)}</span>\n              </div>\n            </div>\n            \n            <h3 className=\"section-title\">Performanță pe capitole</h3>\n            <div className=\"chapter-results\">\n              {Object.entries(resultsByChapter).map(([chapter, data]) => (\n                <div key={chapter} className=\"chapter-result\">\n                  <div className=\"chapter-header\">\n                    <h4>Capitolul {chapter.replace('cap', '')}</h4>\n                    <div className=\"chapter-score\">\n                      {Math.round((data.correct / data.total) * 100)}%\n                    </div>\n                  </div>\n                  <div className=\"chapter-detail\">\n                    {data.correct} corecte din {data.total} întrebări\n                  </div>\n                  <div className=\"progress-bar\">\n                    <div \n                      className=\"progress-fill\" \n                      style={{ width: `${(data.correct / data.total) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"results-actions\">\n              <button \n                className=\"btn btn-primary\"\n                onClick={onRestart}\n              >\n                Reîncepe Simularea\n              </button>\n              <button \n                className=\"btn btn-secondary\"\n                onClick={onExit}\n              >\n                Ieșire din Simulare\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"right-column\">\n          {/* Statistics summary */}\n          <div className=\"stats-summary\">\n            <h2 className=\"stats-title\">Statistici globale</h2>\n            <div className=\"stats-grid\">\n              <div className=\"stat-box\">\n                <div className=\"stat-box-value\">{simulationStats.testsTaken}</div>\n                <div className=\"stat-box-label\">Simulări efectuate</div>\n              </div>\n              \n              <div className=\"stat-box\">\n                <div className=\"stat-box-value\">{simulationStats.testsPassed}</div>\n                <div className=\"stat-box-label\">Simulări promovate</div>\n              </div>\n              \n              <div className=\"stat-box\">\n                <div className=\"stat-box-value\">\n                  {simulationStats.testsTaken > 0 \n                    ? Math.round((simulationStats.testsPassed / simulationStats.testsTaken) * 100) \n                    : 0}%\n                </div>\n                <div className=\"stat-box-label\">Rată de promovare</div>\n              </div>\n              \n              <div className=\"stat-box\">\n                <div className=\"stat-box-value\">\n                  {simulationStats.totalCorrectAnswers || 0}\n                  <span className=\"stat-box-ratio\">/{simulationStats.totalQuestionsAnswered || 0}</span>\n                </div>\n                <div className=\"stat-box-label\">\n                  Răspunsuri corecte\n                  {simulationStats.totalQuestionsAnswered > 0 && (\n                    <span className=\"stat-box-percentage\">\n                      ({Math.round((simulationStats.totalCorrectAnswers / simulationStats.totalQuestionsAnswered) * 100)}%)\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            {/* Show recent test history */}\n            <h3 className=\"section-title\">Ultimele Simulări</h3>\n            {simulationStats.last10Tests.length > 0 ? (\n              <div className=\"last-tests-list\">\n                {simulationStats.last10Tests.map((test, index) => (\n                  <div \n                    key={index}\n                    className={`test-result ${test.passed ? 'passed' : 'failed'}`}\n                  >\n                    <div className=\"test-result-score\">{test.score}%</div>\n                    <div className=\"test-result-details\">\n                      <div>{test.correctCount} din {test.totalQuestions} corecte</div>\n                      <div className=\"test-result-date\">{new Date(test.date).toLocaleDateString()}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"no-data\">Nu există simulări recente</div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimulationResults; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}