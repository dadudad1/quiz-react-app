{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import QuizContainer from'./components/QuizContainer';import Statistics from'./components/Statistics';import LoadingOverlay from'./components/LoadingOverlay';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[questions,setQuestions]=useState([]);const[filteredQuestions,setFilteredQuestions]=useState([]);const[correctAnswers,setCorrectAnswers]=useState({});const[isLoading,setIsLoading]=useState(true);const[stats,setStats]=useState({correctCount:0,totalCount:0,bookmarkedCount:0});const[bookmarkedQuestions,setBookmarkedQuestions]=useState(new Set());const[error,setError]=useState(null);// Încărcăm răspunsurile corecte din datele cap1_raspunsuri\nuseEffect(()=>{const answersData=\"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";const answers={};answersData.split('; ').forEach(item=>{const parts=item.split('.');if(parts.length===2){const questionNumber=parseInt(parts[0]);const answer=parts[1];answers[questionNumber]=answer;}});setCorrectAnswers(answers);},[]);// Încărcăm întrebările din JSON\nuseEffect(()=>{const fetchQuestions=async()=>{try{const response=await fetch('./questions.json');if(!response.ok){throw new Error('Nu s-au putut încărca întrebările');}const data=await response.json();setQuestions(data);setFilteredQuestions(data);setIsLoading(false);}catch(err){setError(err.message);setIsLoading(false);}};fetchQuestions();},[]);// Încărcăm întrebările salvate din localStorage\nuseEffect(()=>{const savedBookmarks=localStorage.getItem('bookmarkedQuestions');if(savedBookmarks){try{const bookmarks=JSON.parse(savedBookmarks);setBookmarkedQuestions(new Set(bookmarks));setStats(prev=>({...prev,bookmarkedCount:bookmarks.length}));}catch(e){console.error('Eroare la încărcarea întrebărilor salvate:',e);}}},[]);// Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\nuseEffect(()=>{setStats(prev=>({...prev,bookmarkedCount:bookmarkedQuestions.size}));// Salvăm întrebările marcate în localStorage\nlocalStorage.setItem('bookmarkedQuestions',JSON.stringify([...bookmarkedQuestions]));},[bookmarkedQuestions]);// Funcția de căutare în întrebări\nconst searchQuestions=query=>{if(!query.trim()){setFilteredQuestions([...questions]);return true;}query=query.toLowerCase();const filtered=questions.filter(q=>{// Căutăm după numărul întrebării\nif(q.numar.toString()===query){return true;}// Căutăm în textul întrebării\nif(q.intrebare.toLowerCase().includes(query)){return true;}// Căutăm în variante\nfor(const text of Object.values(q.variante)){if(text.toLowerCase().includes(query)){return true;}}return false;});setFilteredQuestions(filtered);return filtered.length>0;};// Funcția pentru actualizarea statisticilor\nconst updateStats=isCorrect=>{setStats(prev=>({...prev,correctCount:isCorrect?prev.correctCount+1:prev.correctCount,totalCount:prev.totalCount+1}));};// Funcția pentru resetarea statisticilor\nconst resetStats=()=>{setStats(prev=>({...prev,correctCount:0,totalCount:0}));};// Funcția pentru toggle bookmark\nconst toggleBookmark=questionNumber=>{setBookmarkedQuestions(prev=>{const newBookmarks=new Set(prev);if(newBookmarks.has(questionNumber)){newBookmarks.delete(questionNumber);}else{newBookmarks.add(questionNumber);}return newBookmarks;});};if(isLoading){return/*#__PURE__*/_jsx(LoadingOverlay,{});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"Eroare: \",error]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"App-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Quiz Biologie\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsx(QuizContainer,{questions:questions,filteredQuestions:filteredQuestions,correctAnswers:correctAnswers,bookmarkedQuestions:bookmarkedQuestions,updateStats:updateStats,toggleBookmark:toggleBookmark,searchQuestions:searchQuestions}),/*#__PURE__*/_jsx(Statistics,{correctCount:stats.correctCount,totalCount:stats.totalCount,bookmarkedCount:stats.bookmarkedCount,resetStats:resetStats})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"App-footer\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2023 Quiz Biologie\"})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","QuizContainer","Statistics","LoadingOverlay","jsx","_jsx","jsxs","_jsxs","App","questions","setQuestions","filteredQuestions","setFilteredQuestions","correctAnswers","setCorrectAnswers","isLoading","setIsLoading","stats","setStats","correctCount","totalCount","bookmarkedCount","bookmarkedQuestions","setBookmarkedQuestions","Set","error","setError","answersData","answers","split","forEach","item","parts","length","questionNumber","parseInt","answer","fetchQuestions","response","fetch","ok","Error","data","json","err","message","savedBookmarks","localStorage","getItem","bookmarks","JSON","parse","prev","e","console","size","setItem","stringify","searchQuestions","query","trim","toLowerCase","filtered","filter","q","numar","toString","intrebare","includes","text","Object","values","variante","updateStats","isCorrect","resetStats","toggleBookmark","newBookmarks","has","delete","add","className","children"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport QuizContainer from './components/QuizContainer';\r\nimport Statistics from './components/Statistics';\r\nimport LoadingOverlay from './components/LoadingOverlay';\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    correctCount: 0,\r\n    totalCount: 0,\r\n    bookmarkedCount: 0\r\n  });\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\r\n  const [error, setError] = useState(null);\r\n\r\n  // Încărcăm răspunsurile corecte din datele cap1_raspunsuri\r\n  useEffect(() => {\r\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\r\n    \r\n    const answers = {};\r\n    answersData.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswers(answers);\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch('./questions.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările');\r\n        }\r\n        const data = await response.json();\r\n        setQuestions(data);\r\n        setFilteredQuestions(data);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  // Încărcăm întrebările salvate din localStorage\r\n  useEffect(() => {\r\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\r\n    if (savedBookmarks) {\r\n      try {\r\n        const bookmarks = JSON.parse(savedBookmarks);\r\n        setBookmarkedQuestions(new Set(bookmarks));\r\n        setStats(prev => ({\r\n          ...prev,\r\n          bookmarkedCount: bookmarks.length\r\n        }));\r\n      } catch (e) {\r\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\r\n  useEffect(() => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      bookmarkedCount: bookmarkedQuestions.size\r\n    }));\r\n    \r\n    // Salvăm întrebările marcate în localStorage\r\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\r\n  }, [bookmarkedQuestions]);\r\n\r\n  // Funcția de căutare în întrebări\r\n  const searchQuestions = (query) => {\r\n    if (!query.trim()) {\r\n      setFilteredQuestions([...questions]);\r\n      return true;\r\n    }\r\n    \r\n    query = query.toLowerCase();\r\n    const filtered = questions.filter(q => {\r\n      // Căutăm după numărul întrebării\r\n      if (q.numar.toString() === query) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în textul întrebării\r\n      if (q.intrebare.toLowerCase().includes(query)) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în variante\r\n      for (const text of Object.values(q.variante)) {\r\n        if (text.toLowerCase().includes(query)) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    });\r\n    \r\n    setFilteredQuestions(filtered);\r\n    \r\n    return filtered.length > 0;\r\n  };\r\n\r\n  // Funcția pentru actualizarea statisticilor\r\n  const updateStats = (isCorrect) => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\r\n      totalCount: prev.totalCount + 1\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru resetarea statisticilor\r\n  const resetStats = () => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: 0,\r\n      totalCount: 0\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru toggle bookmark\r\n  const toggleBookmark = (questionNumber) => {\r\n    setBookmarkedQuestions(prev => {\r\n      const newBookmarks = new Set(prev);\r\n      if (newBookmarks.has(questionNumber)) {\r\n        newBookmarks.delete(questionNumber);\r\n      } else {\r\n        newBookmarks.add(questionNumber);\r\n      }\r\n      return newBookmarks;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <LoadingOverlay />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">Eroare: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Quiz Biologie</h1>\r\n      </header>\r\n      <main>\r\n        <QuizContainer\r\n          questions={questions}\r\n          filteredQuestions={filteredQuestions}\r\n          correctAnswers={correctAnswers}\r\n          bookmarkedQuestions={bookmarkedQuestions}\r\n          updateStats={updateStats}\r\n          toggleBookmark={toggleBookmark}\r\n          searchQuestions={searchQuestions}\r\n        />\r\n        <Statistics\r\n          correctCount={stats.correctCount}\r\n          totalCount={stats.totalCount}\r\n          bookmarkedCount={stats.bookmarkedCount}\r\n          resetStats={resetStats}\r\n        />\r\n      </main>\r\n      <footer className=\"App-footer\">\r\n        <p>© 2023 Quiz Biologie</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}