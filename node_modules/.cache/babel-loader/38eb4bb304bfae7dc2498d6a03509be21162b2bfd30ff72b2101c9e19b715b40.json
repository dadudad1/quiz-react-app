{"ast":null,"code":"var _jsxFileName = \"/Users/dragosudrea/repos/quiz-react-app/src/components/QuizContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport '../styles/QuizContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizContainer = ({\n  questions,\n  filteredQuestions,\n  correctAnswers,\n  bookmarkedQuestions,\n  updateStats,\n  toggleBookmark,\n  searchQuestions\n}) => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [feedback, setFeedback] = useState({\n    visible: false,\n    isCorrect: false,\n    message: ''\n  });\n  const [currentMode, setCurrentMode] = useState('random');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [jumpToQuestion, setJumpToQuestion] = useState('');\n\n  // Încărcăm întrebarea curentă când se modifică questions sau currentMode\n  useEffect(() => {\n    if (questions.length > 0) {\n      loadQuestion();\n    }\n  }, [questions, currentMode, filteredQuestions, currentIndex]);\n  const loadQuestion = () => {\n    // Resetăm starea\n    setFeedback({\n      visible: false,\n      isCorrect: false,\n      message: ''\n    });\n    setSelectedAnswers([]);\n\n    // Utilizăm întrebările filtrate sau toate întrebările\n    const questionPool = currentMode === \"search\" ? filteredQuestions : questions;\n    if (questionPool.length === 0) {\n      setCurrentQuestion(null);\n      return;\n    }\n\n    // Determinăm ce întrebare să încărcăm în funcție de mod\n    let newIndex = currentIndex;\n    if (currentMode === \"random\") {\n      newIndex = Math.floor(Math.random() * questionPool.length);\n      setCurrentIndex(newIndex);\n    } else if (currentMode === \"bookmarked\") {\n      // Găsim toate întrebările salvate\n      const bookmarked = questionPool.filter(q => bookmarkedQuestions.has(q.numar));\n      if (bookmarked.length === 0) {\n        setCurrentQuestion(null);\n        return;\n      }\n      // Alegem o întrebare aleatorie dintre cele salvate\n      const randomBookmarked = Math.floor(Math.random() * bookmarked.length);\n      const bookmarkedQuestion = bookmarked[randomBookmarked];\n      newIndex = questionPool.findIndex(q => q.numar === bookmarkedQuestion.numar);\n      setCurrentIndex(newIndex);\n    } else if (currentMode === \"search\") {\n      // Pentru modul de căutare, folosim indexul curent\n      newIndex = currentIndex;\n    } else if (currentMode === \"sequential\") {\n      // Pentru modul secvențial, folosim indexul curent\n      newIndex = currentIndex;\n    }\n\n    // Ne asigurăm că newIndex este în limite\n    if (newIndex >= questionPool.length) {\n      newIndex = 0;\n      setCurrentIndex(0);\n    }\n    setCurrentQuestion(questionPool[newIndex]);\n  };\n  const nextQuestion = () => {\n    if (currentMode === \"sequential\") {\n      const nextIndex = (currentIndex + 1) % questions.length;\n      setCurrentIndex(nextIndex);\n    } else if (currentMode === \"search\") {\n      const nextIndex = (currentIndex + 1) % filteredQuestions.length;\n      setCurrentIndex(nextIndex);\n    } else {\n      loadQuestion();\n    }\n  };\n  const previousQuestion = () => {\n    if (currentMode === \"sequential\") {\n      const prevIndex = (currentIndex - 1 + questions.length) % questions.length;\n      setCurrentIndex(prevIndex);\n    } else if (currentMode === \"search\") {\n      const prevIndex = (currentIndex - 1 + filteredQuestions.length) % filteredQuestions.length;\n      setCurrentIndex(prevIndex);\n    } else {\n      loadQuestion();\n    }\n  };\n  const handleAnswerSelection = letter => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      if (index === -1) {\n        // Adăugăm selecția\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Eliminăm selecția\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n  const checkAnswer = () => {\n    if (!currentQuestion) return;\n    const questionNumber = currentQuestion.numar;\n    const correct = correctAnswers[questionNumber] || \"\";\n\n    // Convertim selecțiile în string pentru comparație\n    const userAnswer = selectedAnswers.join('');\n\n    // Determinăm dacă răspunsul este corect\n    const isCorrect = userAnswer === correct;\n\n    // Actualizăm statisticile\n    updateStats(isCorrect);\n\n    // Afișăm rezultatul\n    setFeedback({\n      visible: true,\n      isCorrect,\n      message: isCorrect ? `Corect! Ai selectat răspunsul corect.` : `Incorect! Răspunsul corect este ${correct}.`\n    });\n  };\n  const handleModeChange = e => {\n    const newMode = e.target.value;\n    setCurrentMode(newMode);\n    if (newMode === \"search\") {\n      // Nu încărcăm întrebarea aici pentru modul search, doar când se face căutarea\n    } else {\n      // Resetăm indexul pentru celelalte moduri și încărcăm o nouă întrebare\n      setCurrentIndex(0);\n    }\n  };\n  const handleSearch = () => {\n    if (searchQuestions(searchQuery)) {\n      // Dacă s-au găsit rezultate, încărcăm prima întrebare\n      setCurrentIndex(0);\n    }\n  };\n  const handleBookmarkToggle = () => {\n    if (currentQuestion) {\n      toggleBookmark(currentQuestion.numar);\n    }\n  };\n  const handleJumpToQuestion = e => {\n    e.preventDefault();\n    const questionNumber = parseInt(jumpToQuestion);\n    if (isNaN(questionNumber) || questionNumber < 1 || questionNumber > questions.length) {\n      alert(`Te rog introdu un număr între 1 și ${questions.length}`);\n      return;\n    }\n\n    // Find the index of the question with this number\n    const targetIndex = questions.findIndex(q => q.numar === questionNumber);\n    if (targetIndex !== -1) {\n      setCurrentIndex(targetIndex);\n      setJumpToQuestion('');\n    } else {\n      alert(`Întrebarea cu numărul ${questionNumber} nu a fost găsită`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-counter\",\n      children: currentQuestion && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\xCEntrebarea \", currentQuestion.numar, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: currentMode,\n        onChange: handleModeChange,\n        className: \"question-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"random\",\n          children: \"\\xCEntrebare aleatorie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sequential\",\n          children: \"\\xCEntreb\\u0103ri \\xEEn ordine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bookmarked\",\n          children: \"\\xCEntreb\\u0103ri salvate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"search\",\n          children: \"C\\u0103utare \\xEEntreb\\u0103ri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), currentMode === \"sequential\" && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleJumpToQuestion,\n        className: \"jump-to-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: questions.length,\n          value: jumpToQuestion,\n          onChange: e => setJumpToQuestion(e.target.value),\n          placeholder: \"Salt la \\xEEntrebarea...\",\n          className: \"jump-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-jump\",\n          children: \"Salt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `bookmark-icon ${bookmarkedQuestions.has(currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.numar) ? 'bookmark-active' : 'bookmark-inactive'}`,\n          onClick: handleBookmarkToggle,\n          children: \"\\u2605\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), currentMode === \"search\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        placeholder: \"Caut\\u0103 dup\\u0103 num\\u0103r sau text...\",\n        className: \"search-input\",\n        onKeyPress: e => e.key === 'Enter' && handleSearch()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        className: \"btn\",\n        children: \"Caut\\u0103\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-hint\",\n        children: \"Po\\u021Bi c\\u0103uta dup\\u0103 num\\u0103rul exact al \\xEEntreb\\u0103rii (ex: 25) sau dup\\u0103 text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), currentQuestion ? /*#__PURE__*/_jsxDEV(QuestionDisplay, {\n      question: currentQuestion,\n      selectedAnswers: selectedAnswers,\n      onAnswerSelect: handleAnswerSelection,\n      feedback: feedback,\n      correctAnswer: correctAnswers[currentQuestion.numar] || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-placeholder\",\n      children: currentMode === \"bookmarked\" ? \"Nu ai întrebări salvate. Salvează întrebări folosind steluța.\" : currentMode === \"search\" ? \"Nicio întrebare nu conține termenul căutat. Încearcă o altă căutare.\" : \"Nicio întrebare disponibilă.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multiple-choice-hint\",\n      children: \"Selecteaz\\u0103 toate r\\u0103spunsurile corecte (pot fi una sau mai multe variante).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [(currentMode === \"sequential\" || currentMode === \"search\") && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: previousQuestion,\n        children: \"\\xCEntrebarea anterioar\\u0103\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-check\",\n        onClick: checkAnswer,\n        disabled: !currentQuestion || selectedAnswers.length === 0,\n        children: \"Verific\\u0103 r\\u0103spunsul\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: nextQuestion,\n        children: currentMode === \"sequential\" ? \"Întrebarea următoare\" : \"Următoarea întrebare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizContainer, \"5oJI/REgFChU4rGve39JVizC+Zs=\");\n_c = QuizContainer;\nexport default QuizContainer;\nvar _c;\n$RefreshReg$(_c, \"QuizContainer\");","map":{"version":3,"names":["React","useState","useEffect","QuestionDisplay","jsxDEV","_jsxDEV","QuizContainer","questions","filteredQuestions","correctAnswers","bookmarkedQuestions","updateStats","toggleBookmark","searchQuestions","_s","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","feedback","setFeedback","visible","isCorrect","message","currentMode","setCurrentMode","currentIndex","setCurrentIndex","searchQuery","setSearchQuery","jumpToQuestion","setJumpToQuestion","length","loadQuestion","questionPool","newIndex","Math","floor","random","bookmarked","filter","q","has","numar","randomBookmarked","bookmarkedQuestion","findIndex","nextQuestion","nextIndex","previousQuestion","prevIndex","handleAnswerSelection","letter","prev","index","indexOf","newSelected","sort","l","checkAnswer","questionNumber","correct","userAnswer","join","handleModeChange","e","newMode","target","value","handleSearch","handleBookmarkToggle","handleJumpToQuestion","preventDefault","parseInt","isNaN","alert","targetIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onSubmit","type","min","max","placeholder","onClick","onKeyPress","key","question","onAnswerSelect","correctAnswer","disabled","_c","$RefreshReg$"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/QuizContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport QuestionDisplay from './QuestionDisplay';\r\nimport '../styles/QuizContainer.css';\r\n\r\nconst QuizContainer = ({\r\n  questions,\r\n  filteredQuestions,\r\n  correctAnswers,\r\n  bookmarkedQuestions,\r\n  updateStats,\r\n  toggleBookmark,\r\n  searchQuestions\r\n}) => {\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [feedback, setFeedback] = useState({ visible: false, isCorrect: false, message: '' });\r\n  const [currentMode, setCurrentMode] = useState('random');\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [jumpToQuestion, setJumpToQuestion] = useState('');\r\n\r\n  // Încărcăm întrebarea curentă când se modifică questions sau currentMode\r\n  useEffect(() => {\r\n    if (questions.length > 0) {\r\n      loadQuestion();\r\n    }\r\n  }, [questions, currentMode, filteredQuestions, currentIndex]);\r\n\r\n  const loadQuestion = () => {\r\n    // Resetăm starea\r\n    setFeedback({ visible: false, isCorrect: false, message: '' });\r\n    setSelectedAnswers([]);\r\n    \r\n    // Utilizăm întrebările filtrate sau toate întrebările\r\n    const questionPool = (currentMode === \"search\") ? filteredQuestions : questions;\r\n    \r\n    if (questionPool.length === 0) {\r\n      setCurrentQuestion(null);\r\n      return;\r\n    }\r\n    \r\n    // Determinăm ce întrebare să încărcăm în funcție de mod\r\n    let newIndex = currentIndex;\r\n    \r\n    if (currentMode === \"random\") {\r\n      newIndex = Math.floor(Math.random() * questionPool.length);\r\n      setCurrentIndex(newIndex);\r\n    } else if (currentMode === \"bookmarked\") {\r\n      // Găsim toate întrebările salvate\r\n      const bookmarked = questionPool.filter(q => bookmarkedQuestions.has(q.numar));\r\n      if (bookmarked.length === 0) {\r\n        setCurrentQuestion(null);\r\n        return;\r\n      }\r\n      // Alegem o întrebare aleatorie dintre cele salvate\r\n      const randomBookmarked = Math.floor(Math.random() * bookmarked.length);\r\n      const bookmarkedQuestion = bookmarked[randomBookmarked];\r\n      newIndex = questionPool.findIndex(q => q.numar === bookmarkedQuestion.numar);\r\n      setCurrentIndex(newIndex);\r\n    } else if (currentMode === \"search\") {\r\n      // Pentru modul de căutare, folosim indexul curent\r\n      newIndex = currentIndex;\r\n    } else if (currentMode === \"sequential\") {\r\n      // Pentru modul secvențial, folosim indexul curent\r\n      newIndex = currentIndex;\r\n    }\r\n    \r\n    // Ne asigurăm că newIndex este în limite\r\n    if (newIndex >= questionPool.length) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    }\r\n    \r\n    setCurrentQuestion(questionPool[newIndex]);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    if (currentMode === \"sequential\") {\r\n      const nextIndex = (currentIndex + 1) % questions.length;\r\n      setCurrentIndex(nextIndex);\r\n    } else if (currentMode === \"search\") {\r\n      const nextIndex = (currentIndex + 1) % filteredQuestions.length;\r\n      setCurrentIndex(nextIndex);\r\n    } else {\r\n      loadQuestion();\r\n    }\r\n  };\r\n\r\n  const previousQuestion = () => {\r\n    if (currentMode === \"sequential\") {\r\n      const prevIndex = (currentIndex - 1 + questions.length) % questions.length;\r\n      setCurrentIndex(prevIndex);\r\n    } else if (currentMode === \"search\") {\r\n      const prevIndex = (currentIndex - 1 + filteredQuestions.length) % filteredQuestions.length;\r\n      setCurrentIndex(prevIndex);\r\n    } else {\r\n      loadQuestion();\r\n    }\r\n  };\r\n\r\n  const handleAnswerSelection = (letter) => {\r\n    setSelectedAnswers(prev => {\r\n      const index = prev.indexOf(letter);\r\n      \r\n      if (index === -1) {\r\n        // Adăugăm selecția\r\n        const newSelected = [...prev, letter];\r\n        newSelected.sort();\r\n        return newSelected;\r\n      } else {\r\n        // Eliminăm selecția\r\n        return prev.filter(l => l !== letter);\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (!currentQuestion) return;\r\n    \r\n    const questionNumber = currentQuestion.numar;\r\n    const correct = correctAnswers[questionNumber] || \"\";\r\n    \r\n    // Convertim selecțiile în string pentru comparație\r\n    const userAnswer = selectedAnswers.join('');\r\n    \r\n    // Determinăm dacă răspunsul este corect\r\n    const isCorrect = userAnswer === correct;\r\n    \r\n    // Actualizăm statisticile\r\n    updateStats(isCorrect);\r\n    \r\n    // Afișăm rezultatul\r\n    setFeedback({\r\n      visible: true,\r\n      isCorrect,\r\n      message: isCorrect \r\n        ? `Corect! Ai selectat răspunsul corect.` \r\n        : `Incorect! Răspunsul corect este ${correct}.`\r\n    });\r\n  };\r\n\r\n  const handleModeChange = (e) => {\r\n    const newMode = e.target.value;\r\n    setCurrentMode(newMode);\r\n    \r\n    if (newMode === \"search\") {\r\n      // Nu încărcăm întrebarea aici pentru modul search, doar când se face căutarea\r\n    } else {\r\n      // Resetăm indexul pentru celelalte moduri și încărcăm o nouă întrebare\r\n      setCurrentIndex(0);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (searchQuestions(searchQuery)) {\r\n      // Dacă s-au găsit rezultate, încărcăm prima întrebare\r\n      setCurrentIndex(0);\r\n    }\r\n  };\r\n\r\n  const handleBookmarkToggle = () => {\r\n    if (currentQuestion) {\r\n      toggleBookmark(currentQuestion.numar);\r\n    }\r\n  };\r\n\r\n  const handleJumpToQuestion = (e) => {\r\n    e.preventDefault();\r\n    const questionNumber = parseInt(jumpToQuestion);\r\n    if (isNaN(questionNumber) || questionNumber < 1 || questionNumber > questions.length) {\r\n      alert(`Te rog introdu un număr între 1 și ${questions.length}`);\r\n      return;\r\n    }\r\n    \r\n    // Find the index of the question with this number\r\n    const targetIndex = questions.findIndex(q => q.numar === questionNumber);\r\n    if (targetIndex !== -1) {\r\n      setCurrentIndex(targetIndex);\r\n      setJumpToQuestion('');\r\n    } else {\r\n      alert(`Întrebarea cu numărul ${questionNumber} nu a fost găsită`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <div className=\"question-counter\">\r\n        {currentQuestion && (\r\n          <span>Întrebarea {currentQuestion.numar} din {questions.length}</span>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"controls\">\r\n        <select \r\n          value={currentMode}\r\n          onChange={handleModeChange}\r\n          className=\"question-selector\"\r\n        >\r\n          <option value=\"random\">Întrebare aleatorie</option>\r\n          <option value=\"sequential\">Întrebări în ordine</option>\r\n          <option value=\"bookmarked\">Întrebări salvate</option>\r\n          <option value=\"search\">Căutare întrebări</option>\r\n        </select>\r\n        \r\n        {currentMode === \"sequential\" && (\r\n          <form onSubmit={handleJumpToQuestion} className=\"jump-to-question\">\r\n            <input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max={questions.length}\r\n              value={jumpToQuestion}\r\n              onChange={(e) => setJumpToQuestion(e.target.value)}\r\n              placeholder=\"Salt la întrebarea...\"\r\n              className=\"jump-input\"\r\n            />\r\n            <button type=\"submit\" className=\"btn btn-jump\">\r\n              Salt\r\n            </button>\r\n          </form>\r\n        )}\r\n\r\n        <div>\r\n          <span \r\n            className={`bookmark-icon ${bookmarkedQuestions.has(currentQuestion?.numar) ? 'bookmark-active' : 'bookmark-inactive'}`}\r\n            onClick={handleBookmarkToggle}\r\n          >\r\n            ★\r\n          </span>\r\n        </div>\r\n      </div>\r\n      \r\n      {currentMode === \"search\" && (\r\n        <div className=\"search-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            placeholder=\"Caută după număr sau text...\"\r\n            className=\"search-input\"\r\n            onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n          />\r\n          <button onClick={handleSearch} className=\"btn\">Caută</button>\r\n          <div className=\"search-hint\">\r\n            Poți căuta după numărul exact al întrebării (ex: 25) sau după text.\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {currentQuestion ? (\r\n        <QuestionDisplay\r\n          question={currentQuestion}\r\n          selectedAnswers={selectedAnswers}\r\n          onAnswerSelect={handleAnswerSelection}\r\n          feedback={feedback}\r\n          correctAnswer={correctAnswers[currentQuestion.numar] || \"\"}\r\n        />\r\n      ) : (\r\n        <div className=\"question-placeholder\">\r\n          {currentMode === \"bookmarked\" \r\n            ? \"Nu ai întrebări salvate. Salvează întrebări folosind steluța.\" \r\n            : currentMode === \"search\"\r\n            ? \"Nicio întrebare nu conține termenul căutat. Încearcă o altă căutare.\"\r\n            : \"Nicio întrebare disponibilă.\"}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"multiple-choice-hint\">\r\n        Selectează toate răspunsurile corecte (pot fi una sau mai multe variante).\r\n      </div>\r\n      \r\n      <div className=\"button-container\">\r\n        {(currentMode === \"sequential\" || currentMode === \"search\") && (\r\n          <button \r\n            className=\"btn\" \r\n            onClick={previousQuestion}\r\n          >\r\n            Întrebarea anterioară\r\n          </button>\r\n        )}\r\n        <button \r\n          className=\"btn btn-check\" \r\n          onClick={checkAnswer}\r\n          disabled={!currentQuestion || selectedAnswers.length === 0}\r\n        >\r\n          Verifică răspunsul\r\n        </button>\r\n        <button className=\"btn\" onClick={nextQuestion}>\r\n          {currentMode === \"sequential\" ? \"Întrebarea următoare\" : \"Următoarea întrebare\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizContainer; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGA,CAAC;EACrBC,SAAS;EACTC,iBAAiB;EACjBC,cAAc;EACdC,mBAAmB;EACnBC,WAAW;EACXC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC;IAAEoB,OAAO,EAAE,KAAK;IAAEC,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAC3F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,QAAQ,CAAC;EACxD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIK,SAAS,CAACyB,MAAM,GAAG,CAAC,EAAE;MACxBC,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAAC1B,SAAS,EAAEiB,WAAW,EAAEhB,iBAAiB,EAAEkB,YAAY,CAAC,CAAC;EAE7D,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAb,WAAW,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,SAAS,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC;IAC9DL,kBAAkB,CAAC,EAAE,CAAC;;IAEtB;IACA,MAAMgB,YAAY,GAAIV,WAAW,KAAK,QAAQ,GAAIhB,iBAAiB,GAAGD,SAAS;IAE/E,IAAI2B,YAAY,CAACF,MAAM,KAAK,CAAC,EAAE;MAC7BhB,kBAAkB,CAAC,IAAI,CAAC;MACxB;IACF;;IAEA;IACA,IAAImB,QAAQ,GAAGT,YAAY;IAE3B,IAAIF,WAAW,KAAK,QAAQ,EAAE;MAC5BW,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,YAAY,CAACF,MAAM,CAAC;MAC1DL,eAAe,CAACQ,QAAQ,CAAC;IAC3B,CAAC,MAAM,IAAIX,WAAW,KAAK,YAAY,EAAE;MACvC;MACA,MAAMe,UAAU,GAAGL,YAAY,CAACM,MAAM,CAACC,CAAC,IAAI/B,mBAAmB,CAACgC,GAAG,CAACD,CAAC,CAACE,KAAK,CAAC,CAAC;MAC7E,IAAIJ,UAAU,CAACP,MAAM,KAAK,CAAC,EAAE;QAC3BhB,kBAAkB,CAAC,IAAI,CAAC;QACxB;MACF;MACA;MACA,MAAM4B,gBAAgB,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGC,UAAU,CAACP,MAAM,CAAC;MACtE,MAAMa,kBAAkB,GAAGN,UAAU,CAACK,gBAAgB,CAAC;MACvDT,QAAQ,GAAGD,YAAY,CAACY,SAAS,CAACL,CAAC,IAAIA,CAAC,CAACE,KAAK,KAAKE,kBAAkB,CAACF,KAAK,CAAC;MAC5EhB,eAAe,CAACQ,QAAQ,CAAC;IAC3B,CAAC,MAAM,IAAIX,WAAW,KAAK,QAAQ,EAAE;MACnC;MACAW,QAAQ,GAAGT,YAAY;IACzB,CAAC,MAAM,IAAIF,WAAW,KAAK,YAAY,EAAE;MACvC;MACAW,QAAQ,GAAGT,YAAY;IACzB;;IAEA;IACA,IAAIS,QAAQ,IAAID,YAAY,CAACF,MAAM,EAAE;MACnCG,QAAQ,GAAG,CAAC;MACZR,eAAe,CAAC,CAAC,CAAC;IACpB;IAEAX,kBAAkB,CAACkB,YAAY,CAACC,QAAQ,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIvB,WAAW,KAAK,YAAY,EAAE;MAChC,MAAMwB,SAAS,GAAG,CAACtB,YAAY,GAAG,CAAC,IAAInB,SAAS,CAACyB,MAAM;MACvDL,eAAe,CAACqB,SAAS,CAAC;IAC5B,CAAC,MAAM,IAAIxB,WAAW,KAAK,QAAQ,EAAE;MACnC,MAAMwB,SAAS,GAAG,CAACtB,YAAY,GAAG,CAAC,IAAIlB,iBAAiB,CAACwB,MAAM;MAC/DL,eAAe,CAACqB,SAAS,CAAC;IAC5B,CAAC,MAAM;MACLf,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIzB,WAAW,KAAK,YAAY,EAAE;MAChC,MAAM0B,SAAS,GAAG,CAACxB,YAAY,GAAG,CAAC,GAAGnB,SAAS,CAACyB,MAAM,IAAIzB,SAAS,CAACyB,MAAM;MAC1EL,eAAe,CAACuB,SAAS,CAAC;IAC5B,CAAC,MAAM,IAAI1B,WAAW,KAAK,QAAQ,EAAE;MACnC,MAAM0B,SAAS,GAAG,CAACxB,YAAY,GAAG,CAAC,GAAGlB,iBAAiB,CAACwB,MAAM,IAAIxB,iBAAiB,CAACwB,MAAM;MAC1FL,eAAe,CAACuB,SAAS,CAAC;IAC5B,CAAC,MAAM;MACLjB,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMkB,qBAAqB,GAAIC,MAAM,IAAK;IACxClC,kBAAkB,CAACmC,IAAI,IAAI;MACzB,MAAMC,KAAK,GAAGD,IAAI,CAACE,OAAO,CAACH,MAAM,CAAC;MAElC,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB;QACA,MAAME,WAAW,GAAG,CAAC,GAAGH,IAAI,EAAED,MAAM,CAAC;QACrCI,WAAW,CAACC,IAAI,CAAC,CAAC;QAClB,OAAOD,WAAW;MACpB,CAAC,MAAM;QACL;QACA,OAAOH,IAAI,CAACb,MAAM,CAACkB,CAAC,IAAIA,CAAC,KAAKN,MAAM,CAAC;MACvC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC5C,eAAe,EAAE;IAEtB,MAAM6C,cAAc,GAAG7C,eAAe,CAAC4B,KAAK;IAC5C,MAAMkB,OAAO,GAAGpD,cAAc,CAACmD,cAAc,CAAC,IAAI,EAAE;;IAEpD;IACA,MAAME,UAAU,GAAG7C,eAAe,CAAC8C,IAAI,CAAC,EAAE,CAAC;;IAE3C;IACA,MAAMzC,SAAS,GAAGwC,UAAU,KAAKD,OAAO;;IAExC;IACAlD,WAAW,CAACW,SAAS,CAAC;;IAEtB;IACAF,WAAW,CAAC;MACVC,OAAO,EAAE,IAAI;MACbC,SAAS;MACTC,OAAO,EAAED,SAAS,GACd,uCAAuC,GACvC,mCAAmCuC,OAAO;IAChD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC9B3C,cAAc,CAACyC,OAAO,CAAC;IAEvB,IAAIA,OAAO,KAAK,QAAQ,EAAE;MACxB;IAAA,CACD,MAAM;MACL;MACAvC,eAAe,CAAC,CAAC,CAAC;IACpB;EACF,CAAC;EAED,MAAM0C,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIxD,eAAe,CAACe,WAAW,CAAC,EAAE;MAChC;MACAD,eAAe,CAAC,CAAC,CAAC;IACpB;EACF,CAAC;EAED,MAAM2C,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIvD,eAAe,EAAE;MACnBH,cAAc,CAACG,eAAe,CAAC4B,KAAK,CAAC;IACvC;EACF,CAAC;EAED,MAAM4B,oBAAoB,GAAIN,CAAC,IAAK;IAClCA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClB,MAAMZ,cAAc,GAAGa,QAAQ,CAAC3C,cAAc,CAAC;IAC/C,IAAI4C,KAAK,CAACd,cAAc,CAAC,IAAIA,cAAc,GAAG,CAAC,IAAIA,cAAc,GAAGrD,SAAS,CAACyB,MAAM,EAAE;MACpF2C,KAAK,CAAC,sCAAsCpE,SAAS,CAACyB,MAAM,EAAE,CAAC;MAC/D;IACF;;IAEA;IACA,MAAM4C,WAAW,GAAGrE,SAAS,CAACuC,SAAS,CAACL,CAAC,IAAIA,CAAC,CAACE,KAAK,KAAKiB,cAAc,CAAC;IACxE,IAAIgB,WAAW,KAAK,CAAC,CAAC,EAAE;MACtBjD,eAAe,CAACiD,WAAW,CAAC;MAC5B7C,iBAAiB,CAAC,EAAE,CAAC;IACvB,CAAC,MAAM;MACL4C,KAAK,CAAC,yBAAyBf,cAAc,mBAAmB,CAAC;IACnE;EACF,CAAC;EAED,oBACEvD,OAAA;IAAKwE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BzE,OAAA;MAAKwE,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9B/D,eAAe,iBACdV,OAAA;QAAAyE,QAAA,GAAM,gBAAW,EAAC/D,eAAe,CAAC4B,KAAK,EAAC,OAAK,EAACpC,SAAS,CAACyB,MAAM;MAAA;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IACtE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN7E,OAAA;MAAKwE,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBzE,OAAA;QACE+D,KAAK,EAAE5C,WAAY;QACnB2D,QAAQ,EAAEnB,gBAAiB;QAC3Ba,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAE7BzE,OAAA;UAAQ+D,KAAK,EAAC,QAAQ;UAAAU,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnD7E,OAAA;UAAQ+D,KAAK,EAAC,YAAY;UAAAU,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvD7E,OAAA;UAAQ+D,KAAK,EAAC,YAAY;UAAAU,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACrD7E,OAAA;UAAQ+D,KAAK,EAAC,QAAQ;UAAAU,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,EAER1D,WAAW,KAAK,YAAY,iBAC3BnB,OAAA;QAAM+E,QAAQ,EAAEb,oBAAqB;QAACM,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAChEzE,OAAA;UACEgF,IAAI,EAAC,QAAQ;UACbC,GAAG,EAAC,GAAG;UACPC,GAAG,EAAEhF,SAAS,CAACyB,MAAO;UACtBoC,KAAK,EAAEtC,cAAe;UACtBqD,QAAQ,EAAGlB,CAAC,IAAKlC,iBAAiB,CAACkC,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;UACnDoB,WAAW,EAAC,0BAAuB;UACnCX,SAAS,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eACF7E,OAAA;UAAQgF,IAAI,EAAC,QAAQ;UAACR,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAE/C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACP,eAED7E,OAAA;QAAAyE,QAAA,eACEzE,OAAA;UACEwE,SAAS,EAAE,iBAAiBnE,mBAAmB,CAACgC,GAAG,CAAC3B,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAE4B,KAAK,CAAC,GAAG,iBAAiB,GAAG,mBAAmB,EAAG;UACxH8C,OAAO,EAAEnB,oBAAqB;UAAAQ,QAAA,EAC/B;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL1D,WAAW,KAAK,QAAQ,iBACvBnB,OAAA;MAAKwE,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BzE,OAAA;QACEgF,IAAI,EAAC,MAAM;QACXjB,KAAK,EAAExC,WAAY;QACnBuD,QAAQ,EAAGlB,CAAC,IAAKpC,cAAc,CAACoC,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;QAChDoB,WAAW,EAAC,6CAA8B;QAC1CX,SAAS,EAAC,cAAc;QACxBa,UAAU,EAAGzB,CAAC,IAAKA,CAAC,CAAC0B,GAAG,KAAK,OAAO,IAAItB,YAAY,CAAC;MAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACF7E,OAAA;QAAQoF,OAAO,EAAEpB,YAAa;QAACQ,SAAS,EAAC,KAAK;QAAAC,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7D7E,OAAA;QAAKwE,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAE7B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEAnE,eAAe,gBACdV,OAAA,CAACF,eAAe;MACdyF,QAAQ,EAAE7E,eAAgB;MAC1BE,eAAe,EAAEA,eAAgB;MACjC4E,cAAc,EAAE1C,qBAAsB;MACtChC,QAAQ,EAAEA,QAAS;MACnB2E,aAAa,EAAErF,cAAc,CAACM,eAAe,CAAC4B,KAAK,CAAC,IAAI;IAAG;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,gBAEF7E,OAAA;MAAKwE,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAClCtD,WAAW,KAAK,YAAY,GACzB,+DAA+D,GAC/DA,WAAW,KAAK,QAAQ,GACxB,sEAAsE,GACtE;IAA8B;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CACN,eAED7E,OAAA;MAAKwE,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAEtC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEN7E,OAAA;MAAKwE,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAC9B,CAACtD,WAAW,KAAK,YAAY,IAAIA,WAAW,KAAK,QAAQ,kBACxDnB,OAAA;QACEwE,SAAS,EAAC,KAAK;QACfY,OAAO,EAAExC,gBAAiB;QAAA6B,QAAA,EAC3B;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,eACD7E,OAAA;QACEwE,SAAS,EAAC,eAAe;QACzBY,OAAO,EAAE9B,WAAY;QACrBoC,QAAQ,EAAE,CAAChF,eAAe,IAAIE,eAAe,CAACe,MAAM,KAAK,CAAE;QAAA8C,QAAA,EAC5D;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7E,OAAA;QAAQwE,SAAS,EAAC,KAAK;QAACY,OAAO,EAAE1C,YAAa;QAAA+B,QAAA,EAC3CtD,WAAW,KAAK,YAAY,GAAG,sBAAsB,GAAG;MAAsB;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpE,EAAA,CAhSIR,aAAa;AAAA0F,EAAA,GAAb1F,aAAa;AAkSnB,eAAeA,aAAa;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}