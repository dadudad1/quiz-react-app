{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import QuizContainer from'./components/QuizContainer';import Statistics from'./components/Statistics';import LoadingOverlay from'./components/LoadingOverlay';import Simulation from'./components/Simulation';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){// State for app mode and chapter selection\nconst[appMode,setAppMode]=useState('quiz');// 'quiz' or 'simulation'\nconst[activeChapter,setActiveChapter]=useState('cap1');// State for question sets\nconst[questions,setQuestions]=useState([]);const[questionsChapter2,setQuestionsChapter2]=useState([]);const[questionsChapter3,setQuestionsChapter3]=useState([]);const[filteredQuestions,setFilteredQuestions]=useState([]);// State for correct answers from all chapters\nconst[correctAnswers,setCorrectAnswers]=useState({});const[correctAnswersChapter2,setCorrectAnswersChapter2]=useState({});const[correctAnswersChapter3,setCorrectAnswersChapter3]=useState({});const[isLoading,setIsLoading]=useState(true);const[stats,setStats]=useState({correctCount:0,totalCount:0,bookmarkedCount:0});const[bookmarkedQuestions,setBookmarkedQuestions]=useState(new Set());const[error,setError]=useState(null);// Încărcăm răspunsurile corecte pentru capitolul 1\nuseEffect(()=>{const answersData=\"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";const answers={};answersData.split('; ').forEach(item=>{const parts=item.split('.');if(parts.length===2){const questionNumber=parseInt(parts[0]);const answer=parts[1];answers[questionNumber]=answer;}});setCorrectAnswers(answers);},[]);// Încărcăm răspunsurile corecte pentru capitolul 2\nuseEffect(()=>{const answersData2=\"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";const answers={};answersData2.split('; ').forEach(item=>{const parts=item.split('.');if(parts.length===2){const questionNumber=parseInt(parts[0]);const answer=parts[1];answers[questionNumber]=answer;}});setCorrectAnswersChapter2(answers);},[]);// Încărcăm răspunsurile corecte pentru capitolul 3\nuseEffect(()=>{const answersData3=\"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";const answers={};answersData3.split('; ').forEach(item=>{const parts=item.split('.');if(parts.length===2){const questionNumber=parseInt(parts[0]);const answer=parts[1];answers[questionNumber]=answer;}});setCorrectAnswersChapter3(answers);},[]);// Încărcăm întrebările din JSON pentru capitolul 1\nuseEffect(()=>{const fetchQuestions=async()=>{try{const response=await fetch('./questions.json');if(!response.ok){throw new Error('Nu s-au putut încărca întrebările din capitolul 1');}const data=await response.json();setQuestions(data);// Initialize filtered questions based on active chapter\nif(activeChapter==='cap1'){setFilteredQuestions(data);}setIsLoading(false);}catch(err){setError(err.message);setIsLoading(false);}};fetchQuestions();},[]);// Încărcăm întrebările din JSON pentru capitolul 2\nuseEffect(()=>{const fetchQuestionsChapter2=async()=>{try{const response=await fetch('./cap2.json');if(!response.ok){throw new Error('Nu s-au putut încărca întrebările din capitolul 2');}const data=await response.json();setQuestionsChapter2(data);// Initialize filtered questions based on active chapter\nif(activeChapter==='cap2'){setFilteredQuestions(data);}// If chapter 1 failed to load, we can use chapter 2 as default\nif(questions.length===0&&activeChapter==='cap1'){setActiveChapter('cap2');setFilteredQuestions(data);}}catch(err){console.error('Eroare la încărcarea întrebărilor din capitolul 2:',err);// Don't set error state here to avoid blocking the whole app\n// if just chapter 2 fails to load\n}};fetchQuestionsChapter2();},[questions]);// Depends on questions to ensure proper ordering\n// Încărcăm întrebările din JSON pentru capitolul 3\nuseEffect(()=>{const fetchQuestionsChapter3=async()=>{try{const response=await fetch('./cap3.json');if(!response.ok){throw new Error('Nu s-au putut încărca întrebările din capitolul 3');}const data=await response.json();setQuestionsChapter3(data);// Initialize filtered questions based on active chapter\nif(activeChapter==='cap3'){setFilteredQuestions(data);}}catch(err){console.error('Eroare la încărcarea întrebărilor din capitolul 3:',err);// Don't set error state here to avoid blocking the whole app\n// if just chapter 3 fails to load\n}};fetchQuestionsChapter3();},[questionsChapter2]);// Depends on chapter 2 loading to ensure proper ordering\n// Încărcăm întrebările salvate din localStorage\nuseEffect(()=>{const savedBookmarks=localStorage.getItem('bookmarkedQuestions');if(savedBookmarks){try{const bookmarks=JSON.parse(savedBookmarks);setBookmarkedQuestions(new Set(bookmarks));setStats(prev=>({...prev,bookmarkedCount:bookmarks.length}));}catch(e){console.error('Eroare la încărcarea întrebărilor salvate:',e);}}},[]);// Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\nuseEffect(()=>{setStats(prev=>({...prev,bookmarkedCount:bookmarkedQuestions.size}));// Salvăm întrebările marcate în localStorage\nlocalStorage.setItem('bookmarkedQuestions',JSON.stringify([...bookmarkedQuestions]));},[bookmarkedQuestions]);// Funcția pentru schimbarea modului aplicației\nconst switchAppMode=mode=>{setAppMode(mode);};// Funcția pentru schimbarea capitolului activ\nconst switchChapter=chapter=>{setActiveChapter(chapter);// Update filtered questions based on active chapter\nif(chapter==='cap1'){setFilteredQuestions(questions);}else if(chapter==='cap2'){setFilteredQuestions(questionsChapter2);}else if(chapter==='cap3'){setFilteredQuestions(questionsChapter3);}};// Funcția de căutare în întrebări\nconst searchQuestions=query=>{if(!query.trim()){// Reset based on active chapter\nif(activeChapter==='cap1'){setFilteredQuestions([...questions]);}else if(activeChapter==='cap2'){setFilteredQuestions([...questionsChapter2]);}else if(activeChapter==='cap3'){setFilteredQuestions([...questionsChapter3]);}return true;}query=query.toLowerCase();// Select the appropriate question set based on active chapter\nlet currentQuestions;if(activeChapter==='cap1'){currentQuestions=questions;}else if(activeChapter==='cap2'){currentQuestions=questionsChapter2;}else if(activeChapter==='cap3'){currentQuestions=questionsChapter3;}const filtered=currentQuestions.filter(q=>{// Căutăm după numărul întrebării\nif(q.numar.toString()===query){return true;}// Căutăm în textul întrebării\nif(q.intrebare.toLowerCase().includes(query)){return true;}// Căutăm în variante\nfor(const text of Object.values(q.variante)){if(text.toLowerCase().includes(query)){return true;}}return false;});setFilteredQuestions(filtered);return filtered.length>0;};// Funcția pentru actualizarea statisticilor\nconst updateStats=isCorrect=>{setStats(prev=>({...prev,correctCount:isCorrect?prev.correctCount+1:prev.correctCount,totalCount:prev.totalCount+1}));};// Funcția pentru resetarea statisticilor\nconst resetStats=()=>{setStats(prev=>({...prev,correctCount:0,totalCount:0}));};// Funcția pentru toggle bookmark\nconst toggleBookmark=questionNumber=>{setBookmarkedQuestions(prev=>{const newBookmarks=new Set(prev);if(newBookmarks.has(questionNumber)){newBookmarks.delete(questionNumber);}else{newBookmarks.add(questionNumber);}return newBookmarks;});};if(isLoading){return/*#__PURE__*/_jsx(LoadingOverlay,{});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"Eroare: \",error]});}// Prepare data for simulation mode\nconst allChaptersData={cap1:questions,cap2:questionsChapter2,cap3:questionsChapter3};const correctAnswersData={cap1:correctAnswers,cap2:correctAnswersChapter2,cap3:correctAnswersChapter3};// Get the correct answers based on active chapter\nlet currentAnswers;let currentQuestionSet;if(activeChapter==='cap1'){currentAnswers=correctAnswers;currentQuestionSet=questions;}else if(activeChapter==='cap2'){currentAnswers=correctAnswersChapter2;currentQuestionSet=questionsChapter2;}else if(activeChapter==='cap3'){currentAnswers=correctAnswersChapter3;currentQuestionSet=questionsChapter3;}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Quiz Biologie\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-mode-selector\",children:[/*#__PURE__*/_jsx(\"button\",{className:`mode-btn ${appMode==='quiz'?'active':''}`,onClick:()=>switchAppMode('quiz'),children:\"Mod Quiz\"}),/*#__PURE__*/_jsx(\"button\",{className:`mode-btn ${appMode==='simulation'?'active':''}`,onClick:()=>switchAppMode('simulation'),children:\"Simulare Examen\"})]}),appMode==='quiz'&&/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-selector\",children:[/*#__PURE__*/_jsx(\"button\",{className:`chapter-btn ${activeChapter==='cap1'?'active':''}`,onClick:()=>switchChapter('cap1'),children:\"Capitolul 1\"}),/*#__PURE__*/_jsx(\"button\",{className:`chapter-btn ${activeChapter==='cap2'?'active':''}`,onClick:()=>switchChapter('cap2'),children:\"Capitolul 2\"}),/*#__PURE__*/_jsx(\"button\",{className:`chapter-btn ${activeChapter==='cap3'?'active':''}`,onClick:()=>switchChapter('cap3'),children:\"Capitolul 3\"})]})]}),/*#__PURE__*/_jsx(\"main\",{children:appMode==='quiz'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(QuizContainer,{questions:currentQuestionSet,filteredQuestions:filteredQuestions,correctAnswers:currentAnswers,bookmarkedQuestions:bookmarkedQuestions,updateStats:updateStats,toggleBookmark:toggleBookmark,searchQuestions:searchQuestions}),/*#__PURE__*/_jsx(Statistics,{correctCount:stats.correctCount,totalCount:stats.totalCount,bookmarkedCount:stats.bookmarkedCount,resetStats:resetStats})]}):/*#__PURE__*/_jsx(Simulation,{allChaptersData:allChaptersData,correctAnswersData:correctAnswersData,onExit:()=>switchAppMode('quiz')})}),/*#__PURE__*/_jsx(\"footer\",{className:\"App-footer\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2023 Quiz Biologie\"})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","QuizContainer","Statistics","LoadingOverlay","Simulation","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","appMode","setAppMode","activeChapter","setActiveChapter","questions","setQuestions","questionsChapter2","setQuestionsChapter2","questionsChapter3","setQuestionsChapter3","filteredQuestions","setFilteredQuestions","correctAnswers","setCorrectAnswers","correctAnswersChapter2","setCorrectAnswersChapter2","correctAnswersChapter3","setCorrectAnswersChapter3","isLoading","setIsLoading","stats","setStats","correctCount","totalCount","bookmarkedCount","bookmarkedQuestions","setBookmarkedQuestions","Set","error","setError","answersData","answers","split","forEach","item","parts","length","questionNumber","parseInt","answer","answersData2","answersData3","fetchQuestions","response","fetch","ok","Error","data","json","err","message","fetchQuestionsChapter2","console","fetchQuestionsChapter3","savedBookmarks","localStorage","getItem","bookmarks","JSON","parse","prev","e","size","setItem","stringify","switchAppMode","mode","switchChapter","chapter","searchQuestions","query","trim","toLowerCase","currentQuestions","filtered","filter","q","numar","toString","intrebare","includes","text","Object","values","variante","updateStats","isCorrect","resetStats","toggleBookmark","newBookmarks","has","delete","add","className","children","allChaptersData","cap1","cap2","cap3","correctAnswersData","currentAnswers","currentQuestionSet","onClick","onExit"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport QuizContainer from './components/QuizContainer';\r\nimport Statistics from './components/Statistics';\r\nimport LoadingOverlay from './components/LoadingOverlay';\r\nimport Simulation from './components/Simulation';\r\n\r\nfunction App() {\r\n  // State for app mode and chapter selection\r\n  const [appMode, setAppMode] = useState('quiz'); // 'quiz' or 'simulation'\r\n  const [activeChapter, setActiveChapter] = useState('cap1');\r\n  \r\n  // State for question sets\r\n  const [questions, setQuestions] = useState([]);\r\n  const [questionsChapter2, setQuestionsChapter2] = useState([]);\r\n  const [questionsChapter3, setQuestionsChapter3] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  \r\n  // State for correct answers from all chapters\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [correctAnswersChapter2, setCorrectAnswersChapter2] = useState({});\r\n  const [correctAnswersChapter3, setCorrectAnswersChapter3] = useState({});\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    correctCount: 0,\r\n    totalCount: 0,\r\n    bookmarkedCount: 0\r\n  });\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\r\n  const [error, setError] = useState(null);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 1\r\n  useEffect(() => {\r\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\r\n    \r\n    const answers = {};\r\n    answersData.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswers(answers);\r\n  }, []);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 2\r\n  useEffect(() => {\r\n    const answersData2 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\r\n    \r\n    const answers = {};\r\n    answersData2.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswersChapter2(answers);\r\n  }, []);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 3\r\n  useEffect(() => {\r\n    const answersData3 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\r\n    \r\n    const answers = {};\r\n    answersData3.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswersChapter3(answers);\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 1\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch('./questions.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 1');\r\n        }\r\n        const data = await response.json();\r\n        setQuestions(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap1') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 2\r\n  useEffect(() => {\r\n    const fetchQuestionsChapter2 = async () => {\r\n      try {\r\n        const response = await fetch('./cap2.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 2');\r\n        }\r\n        const data = await response.json();\r\n        setQuestionsChapter2(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap2') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n        // If chapter 1 failed to load, we can use chapter 2 as default\r\n        if (questions.length === 0 && activeChapter === 'cap1') {\r\n          setActiveChapter('cap2');\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Eroare la încărcarea întrebărilor din capitolul 2:', err);\r\n        // Don't set error state here to avoid blocking the whole app\r\n        // if just chapter 2 fails to load\r\n      }\r\n    };\r\n\r\n    fetchQuestionsChapter2();\r\n  }, [questions]); // Depends on questions to ensure proper ordering\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 3\r\n  useEffect(() => {\r\n    const fetchQuestionsChapter3 = async () => {\r\n      try {\r\n        const response = await fetch('./cap3.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 3');\r\n        }\r\n        const data = await response.json();\r\n        setQuestionsChapter3(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap3') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Eroare la încărcarea întrebărilor din capitolul 3:', err);\r\n        // Don't set error state here to avoid blocking the whole app\r\n        // if just chapter 3 fails to load\r\n      }\r\n    };\r\n\r\n    fetchQuestionsChapter3();\r\n  }, [questionsChapter2]); // Depends on chapter 2 loading to ensure proper ordering\r\n\r\n  // Încărcăm întrebările salvate din localStorage\r\n  useEffect(() => {\r\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\r\n    if (savedBookmarks) {\r\n      try {\r\n        const bookmarks = JSON.parse(savedBookmarks);\r\n        setBookmarkedQuestions(new Set(bookmarks));\r\n        setStats(prev => ({\r\n          ...prev,\r\n          bookmarkedCount: bookmarks.length\r\n        }));\r\n      } catch (e) {\r\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\r\n  useEffect(() => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      bookmarkedCount: bookmarkedQuestions.size\r\n    }));\r\n    \r\n    // Salvăm întrebările marcate în localStorage\r\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\r\n  }, [bookmarkedQuestions]);\r\n\r\n  // Funcția pentru schimbarea modului aplicației\r\n  const switchAppMode = (mode) => {\r\n    setAppMode(mode);\r\n  };\r\n\r\n  // Funcția pentru schimbarea capitolului activ\r\n  const switchChapter = (chapter) => {\r\n    setActiveChapter(chapter);\r\n    \r\n    // Update filtered questions based on active chapter\r\n    if (chapter === 'cap1') {\r\n      setFilteredQuestions(questions);\r\n    } else if (chapter === 'cap2') {\r\n      setFilteredQuestions(questionsChapter2);\r\n    } else if (chapter === 'cap3') {\r\n      setFilteredQuestions(questionsChapter3);\r\n    }\r\n  };\r\n\r\n  // Funcția de căutare în întrebări\r\n  const searchQuestions = (query) => {\r\n    if (!query.trim()) {\r\n      // Reset based on active chapter\r\n      if (activeChapter === 'cap1') {\r\n        setFilteredQuestions([...questions]);\r\n      } else if (activeChapter === 'cap2') {\r\n        setFilteredQuestions([...questionsChapter2]);\r\n      } else if (activeChapter === 'cap3') {\r\n        setFilteredQuestions([...questionsChapter3]);\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    query = query.toLowerCase();\r\n    \r\n    // Select the appropriate question set based on active chapter\r\n    let currentQuestions;\r\n    if (activeChapter === 'cap1') {\r\n      currentQuestions = questions;\r\n    } else if (activeChapter === 'cap2') {\r\n      currentQuestions = questionsChapter2;\r\n    } else if (activeChapter === 'cap3') {\r\n      currentQuestions = questionsChapter3;\r\n    }\r\n    \r\n    const filtered = currentQuestions.filter(q => {\r\n      // Căutăm după numărul întrebării\r\n      if (q.numar.toString() === query) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în textul întrebării\r\n      if (q.intrebare.toLowerCase().includes(query)) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în variante\r\n      for (const text of Object.values(q.variante)) {\r\n        if (text.toLowerCase().includes(query)) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    });\r\n    \r\n    setFilteredQuestions(filtered);\r\n    \r\n    return filtered.length > 0;\r\n  };\r\n\r\n  // Funcția pentru actualizarea statisticilor\r\n  const updateStats = (isCorrect) => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\r\n      totalCount: prev.totalCount + 1\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru resetarea statisticilor\r\n  const resetStats = () => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: 0,\r\n      totalCount: 0\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru toggle bookmark\r\n  const toggleBookmark = (questionNumber) => {\r\n    setBookmarkedQuestions(prev => {\r\n      const newBookmarks = new Set(prev);\r\n      if (newBookmarks.has(questionNumber)) {\r\n        newBookmarks.delete(questionNumber);\r\n      } else {\r\n        newBookmarks.add(questionNumber);\r\n      }\r\n      return newBookmarks;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <LoadingOverlay />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">Eroare: {error}</div>;\r\n  }\r\n\r\n  // Prepare data for simulation mode\r\n  const allChaptersData = {\r\n    cap1: questions,\r\n    cap2: questionsChapter2,\r\n    cap3: questionsChapter3\r\n  };\r\n  \r\n  const correctAnswersData = {\r\n    cap1: correctAnswers,\r\n    cap2: correctAnswersChapter2,\r\n    cap3: correctAnswersChapter3\r\n  };\r\n  \r\n  // Get the correct answers based on active chapter\r\n  let currentAnswers;\r\n  let currentQuestionSet;\r\n  \r\n  if (activeChapter === 'cap1') {\r\n    currentAnswers = correctAnswers;\r\n    currentQuestionSet = questions;\r\n  } else if (activeChapter === 'cap2') {\r\n    currentAnswers = correctAnswersChapter2;\r\n    currentQuestionSet = questionsChapter2;\r\n  } else if (activeChapter === 'cap3') {\r\n    currentAnswers = correctAnswersChapter3;\r\n    currentQuestionSet = questionsChapter3;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Quiz Biologie</h1>\r\n        \r\n        <div className=\"app-mode-selector\">\r\n          <button \r\n            className={`mode-btn ${appMode === 'quiz' ? 'active' : ''}`}\r\n            onClick={() => switchAppMode('quiz')}\r\n          >\r\n            Mod Quiz\r\n          </button>\r\n          <button \r\n            className={`mode-btn ${appMode === 'simulation' ? 'active' : ''}`}\r\n            onClick={() => switchAppMode('simulation')}\r\n          >\r\n            Simulare Examen\r\n          </button>\r\n        </div>\r\n        \r\n        {appMode === 'quiz' && (\r\n          <div className=\"chapter-selector\">\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap1' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap1')}\r\n            >\r\n              Capitolul 1\r\n            </button>\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap2' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap2')}\r\n            >\r\n              Capitolul 2\r\n            </button>\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap3' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap3')}\r\n            >\r\n              Capitolul 3\r\n            </button>\r\n          </div>\r\n        )}\r\n      </header>\r\n      \r\n      <main>\r\n        {appMode === 'quiz' ? (\r\n          <>\r\n            <QuizContainer\r\n              questions={currentQuestionSet}\r\n              filteredQuestions={filteredQuestions}\r\n              correctAnswers={currentAnswers}\r\n              bookmarkedQuestions={bookmarkedQuestions}\r\n              updateStats={updateStats}\r\n              toggleBookmark={toggleBookmark}\r\n              searchQuestions={searchQuestions}\r\n            />\r\n            <Statistics\r\n              correctCount={stats.correctCount}\r\n              totalCount={stats.totalCount}\r\n              bookmarkedCount={stats.bookmarkedCount}\r\n              resetStats={resetStats}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Simulation \r\n            allChaptersData={allChaptersData}\r\n            correctAnswersData={correctAnswersData}\r\n            onExit={() => switchAppMode('quiz')}\r\n          />\r\n        )}\r\n      </main>\r\n      \r\n      <footer className=\"App-footer\">\r\n        <p>© 2023 Quiz Biologie</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}