{"ast":null,"code":"var _jsxFileName = \"/Users/dragosudrea/repos/quiz-react-app/src/components/Simulation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport Timer from './Timer';\nimport SimulationResults from './SimulationResults';\nimport SimulationStats from './SimulationStats';\nimport { calculateSimulationResults, formatTime } from './finishSimulation';\nimport '../styles/Simulation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Simulation = ({\n  allChaptersData,\n  correctAnswersData,\n  onExit\n}) => {\n  _s();\n  const SIMULATION_TIME_MINUTES = 120; // 2 hours\n  const SIMULATION_QUESTIONS_COUNT = 60; // 60 questions\n\n  const [simulationState, setSimulationState] = useState('intro'); // intro, running, completed\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [results, setResults] = useState(null);\n  const [simulationStats, setSimulationStats] = useState({\n    testsTaken: 0,\n    testsPassed: 0,\n    totalQuestionsAnswered: 0,\n    totalCorrectAnswers: 0,\n    last10Tests: []\n  });\n\n  // Load simulation statistics from localStorage on mount\n  useEffect(() => {\n    const savedStats = localStorage.getItem('simulationStats');\n    if (savedStats) {\n      try {\n        const stats = JSON.parse(savedStats);\n        setSimulationStats(stats);\n      } catch (e) {\n        console.error('Eroare la încărcarea statisticilor de simulare:', e);\n      }\n    }\n  }, []);\n\n  // Save simulation statistics to localStorage\n  const saveSimulationStats = newStats => {\n    localStorage.setItem('simulationStats', JSON.stringify(newStats));\n    setSimulationStats(newStats);\n  };\n\n  // Reset simulation statistics\n  const resetSimulationStats = () => {\n    const resetStats = {\n      testsTaken: 0,\n      testsPassed: 0,\n      totalQuestionsAnswered: 0,\n      totalCorrectAnswers: 0,\n      last10Tests: []\n    };\n    saveSimulationStats(resetStats);\n  };\n\n  // Update statistics when a simulation is completed\n  const updateSimulationStats = (simulationResults, totalQuestions, timeSpentInSeconds) => {\n    const {\n      correctCount\n    } = simulationResults;\n    const score = Math.round(correctCount / totalQuestions * 100);\n    const isPassed = score >= 70;\n\n    // Create a record of this test\n    const testRecord = {\n      date: new Date().toISOString(),\n      score,\n      passed: isPassed,\n      correctCount,\n      totalQuestions,\n      timeSpent: timeSpentInSeconds\n    };\n\n    // Update stats\n    const newStats = {\n      testsTaken: simulationStats.testsTaken + 1,\n      testsPassed: simulationStats.testsPassed + (isPassed ? 1 : 0),\n      totalQuestionsAnswered: simulationStats.totalQuestionsAnswered + Object.keys(userAnswers).length,\n      totalCorrectAnswers: simulationStats.totalCorrectAnswers + correctCount,\n      last10Tests: [testRecord, ...simulationStats.last10Tests].slice(0, 10) // Keep only last 10\n    };\n    saveSimulationStats(newStats);\n  };\n\n  // Prepare simulation questions by selecting questions from each chapter\n  const prepareSimulationQuestions = useCallback(() => {\n    const chaptersData = Object.keys(allChaptersData);\n    const totalChapters = chaptersData.length;\n\n    // Calculate how many questions to take from each chapter\n    // We want to distribute questions evenly among chapters\n    const questionsPerChapter = Math.floor(SIMULATION_QUESTIONS_COUNT / totalChapters);\n    const remainder = SIMULATION_QUESTIONS_COUNT % totalChapters;\n    const selectedQuestions = [];\n    let chapterCounts = {};\n\n    // First, select an equal number of questions from each chapter\n    chaptersData.forEach(chapter => {\n      const chapterQuestions = allChaptersData[chapter];\n\n      // We need to determine how many questions to take from this chapter\n      const questionsToTake = chapter === chaptersData[0] ? questionsPerChapter + remainder // Add remainder to first chapter\n      : questionsPerChapter;\n\n      // Get random indices without replacement\n      const indices = getRandomIndices(chapterQuestions.length, questionsToTake);\n\n      // Select questions using these indices\n      const selectedFromChapter = indices.map(index => ({\n        ...chapterQuestions[index],\n        chapter // Add the chapter info to each question\n      }));\n\n      // Add to our final array\n      selectedQuestions.push(...selectedFromChapter);\n\n      // Track how many we took from each chapter\n      chapterCounts[chapter] = questionsToTake;\n    });\n\n    // Shuffle the combined array to mix questions from different chapters\n    const shuffledQuestions = shuffleArray([...selectedQuestions]);\n    setQuestions(shuffledQuestions);\n    return shuffledQuestions;\n  }, [allChaptersData]);\n\n  // Initialize simulation\n  const startSimulation = () => {\n    const simulationQuestions = prepareSimulationQuestions();\n\n    // Reset states\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setSelectedAnswers([]);\n    setTimeSpent(0);\n    setResults(null);\n\n    // Start the simulation\n    setSimulationState('running');\n  };\n\n  // Handle time expiration\n  const handleTimeExpired = useCallback(() => {\n    finishSimulation();\n  }, []);\n\n  // Calculate results and end simulation\n  const finishSimulation = useCallback(() => {\n    // Use the helper function to calculate results\n    const simulationResults = calculateSimulationResults(questions, userAnswers, correctAnswersData, allChaptersData);\n\n    // Calculate time spent in seconds\n    const timeSpentInSeconds = SIMULATION_TIME_MINUTES * 60 - timeSpent;\n\n    // Update statistics\n    updateSimulationStats(simulationResults, questions.length, timeSpentInSeconds);\n\n    // Set the final results\n    setResults(simulationResults);\n\n    // Mark simulation as completed\n    setSimulationState('completed');\n  }, [questions, userAnswers, correctAnswersData, allChaptersData, timeSpent, SIMULATION_TIME_MINUTES]);\n\n  // Save answer for current question\n  const saveAnswer = () => {\n    if (selectedAnswers.length === 0) return;\n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: [...selectedAnswers]\n    }));\n\n    // Move to next question\n    if (currentQuestionIndex < questions.length - 1) {\n      goToNextQuestion();\n    }\n  };\n\n  // Navigation\n  const goToNextQuestion = () => {\n    setCurrentQuestionIndex(prev => prev + 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex + 1] || []);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prev => prev - 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex - 1] || []);\n  };\n\n  // Handle answer selection\n  const handleAnswerSelection = letter => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      if (index === -1) {\n        // Add selection and sort\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Remove selection\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n\n  // When the current question changes, load any existing answers\n  useEffect(() => {\n    setSelectedAnswers(userAnswers[currentQuestionIndex] || []);\n  }, [currentQuestionIndex, userAnswers]);\n\n  // Utility functions\n  const getRandomIndices = (max, count) => {\n    const indices = Array.from({\n      length: max\n    }, (_, i) => i);\n    return shuffleArray(indices).slice(0, count);\n  };\n  const shuffleArray = array => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n\n  // Render different states\n  if (simulationState === 'intro') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"two-column-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"simulation-intro\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Mod Simulare Examen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"simulation-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Acest mod simuleaz\\u0103 un examen real cu:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [SIMULATION_QUESTIONS_COUNT, \" \\xEEntreb\\u0103ri\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 23\n                  }, this), \" selectate aleatoriu din toate capitolele\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [SIMULATION_TIME_MINUTES, \" minute\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 23\n                  }, this), \" timp disponibil (\", SIMULATION_TIME_MINUTES / 60, \" ore)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Distribu\\u021Bie propor\\u021Bional\\u0103 a \\xEEntreb\\u0103rilor \\xEEntre capitole\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Posibilitatea de a naviga \\xEEntre \\xEEntreb\\u0103ri \\u0219i de a reveni\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Rezultat detaliat la final\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"E\\u0219ti preg\\u0103tit s\\u0103 \\xEEncepi?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"simulation-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                onClick: startSimulation,\n                children: \"\\xCEncepe Simularea\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-secondary\",\n                onClick: onExit,\n                children: \"\\xCEnapoi la Quiz\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-column\",\n          children: /*#__PURE__*/_jsxDEV(SimulationStats, {\n            stats: simulationStats,\n            onResetStats: resetSimulationStats,\n            totalAvailableQuestions: totalAvailableQuestions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  }\n  if (simulationState === 'completed') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    return /*#__PURE__*/_jsxDEV(SimulationResults, {\n      results: results,\n      totalQuestions: questions.length,\n      timeSpentInSeconds: SIMULATION_TIME_MINUTES * 60 - timeSpent,\n      onRestart: () => setSimulationState('intro'),\n      onExit: onExit,\n      totalAvailableQuestions: totalAvailableQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Running state\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questions.length * 100;\n  const isAnswered = !!userAnswers[currentQuestionIndex];\n\n  // Calculate the correct answers from relevant chapter\n  const chapter = currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.chapter;\n  const correctAnswers = chapter ? correctAnswersData[chapter] : {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simulation-container\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      initialTimeInMinutes: SIMULATION_TIME_MINUTES,\n      onTimeExpired: handleTimeExpired\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\xCEntrebarea \", currentQuestionIndex + 1, \" din \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${progress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-finish\",\n        onClick: finishSimulation,\n        children: \"Termin\\u0103 simularea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-question\",\n      children: [/*#__PURE__*/_jsxDEV(QuestionDisplay, {\n        question: currentQuestion,\n        selectedAnswers: selectedAnswers,\n        onAnswerSelect: handleAnswerSelection,\n        feedback: {\n          visible: false\n        },\n        correctAnswer: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-status\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-indicator\",\n          children: isAnswered && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"answered-indicator\",\n            children: \"\\u2713 R\\u0103spuns salvat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: goToPreviousQuestion,\n        disabled: currentQuestionIndex === 0,\n        children: \"\\xCEntrebarea anterioar\\u0103\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: saveAnswer,\n        disabled: selectedAnswers.length === 0,\n        children: isAnswered ? 'Actualizează răspunsul' : 'Salvează răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: goToNextQuestion,\n        disabled: currentQuestionIndex === questions.length - 1,\n        children: \"\\xCEntrebarea urm\\u0103toare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n};\n_s(Simulation, \"88KRLLLSWh+QLRCbA79lox0M0SM=\");\n_c = Simulation;\nexport default Simulation;\nvar _c;\n$RefreshReg$(_c, \"Simulation\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","QuestionDisplay","Timer","SimulationResults","SimulationStats","calculateSimulationResults","formatTime","jsxDEV","_jsxDEV","Simulation","allChaptersData","correctAnswersData","onExit","_s","SIMULATION_TIME_MINUTES","SIMULATION_QUESTIONS_COUNT","simulationState","setSimulationState","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","selectedAnswers","setSelectedAnswers","timeSpent","setTimeSpent","results","setResults","simulationStats","setSimulationStats","testsTaken","testsPassed","totalQuestionsAnswered","totalCorrectAnswers","last10Tests","savedStats","localStorage","getItem","stats","JSON","parse","e","console","error","saveSimulationStats","newStats","setItem","stringify","resetSimulationStats","resetStats","updateSimulationStats","simulationResults","totalQuestions","timeSpentInSeconds","correctCount","score","Math","round","isPassed","testRecord","date","Date","toISOString","passed","Object","keys","length","slice","prepareSimulationQuestions","chaptersData","totalChapters","questionsPerChapter","floor","remainder","selectedQuestions","chapterCounts","forEach","chapter","chapterQuestions","questionsToTake","indices","getRandomIndices","selectedFromChapter","map","index","push","shuffledQuestions","shuffleArray","startSimulation","simulationQuestions","handleTimeExpired","finishSimulation","saveAnswer","prev","goToNextQuestion","goToPreviousQuestion","handleAnswerSelection","letter","indexOf","newSelected","sort","filter","l","max","count","Array","from","_","i","array","newArray","j","random","totalAvailableQuestions","values","reduce","total","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onResetStats","onRestart","currentQuestion","progress","isAnswered","correctAnswers","initialTimeInMinutes","onTimeExpired","style","width","question","onAnswerSelect","feedback","visible","correctAnswer","disabled","_c","$RefreshReg$"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/Simulation.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport Timer from './Timer';\nimport SimulationResults from './SimulationResults';\nimport SimulationStats from './SimulationStats';\nimport { calculateSimulationResults, formatTime } from './finishSimulation';\nimport '../styles/Simulation.css';\n\nconst Simulation = ({ \n  allChaptersData, \n  correctAnswersData,\n  onExit \n}) => {\n  const SIMULATION_TIME_MINUTES = 120; // 2 hours\n  const SIMULATION_QUESTIONS_COUNT = 60; // 60 questions\n  \n  const [simulationState, setSimulationState] = useState('intro'); // intro, running, completed\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [results, setResults] = useState(null);\n  const [simulationStats, setSimulationStats] = useState({\n    testsTaken: 0,\n    testsPassed: 0,\n    totalQuestionsAnswered: 0,\n    totalCorrectAnswers: 0,\n    last10Tests: []\n  });\n  \n  // Load simulation statistics from localStorage on mount\n  useEffect(() => {\n    const savedStats = localStorage.getItem('simulationStats');\n    if (savedStats) {\n      try {\n        const stats = JSON.parse(savedStats);\n        setSimulationStats(stats);\n      } catch (e) {\n        console.error('Eroare la încărcarea statisticilor de simulare:', e);\n      }\n    }\n  }, []);\n  \n  // Save simulation statistics to localStorage\n  const saveSimulationStats = (newStats) => {\n    localStorage.setItem('simulationStats', JSON.stringify(newStats));\n    setSimulationStats(newStats);\n  };\n  \n  // Reset simulation statistics\n  const resetSimulationStats = () => {\n    const resetStats = {\n      testsTaken: 0,\n      testsPassed: 0,\n      totalQuestionsAnswered: 0,\n      totalCorrectAnswers: 0,\n      last10Tests: []\n    };\n    saveSimulationStats(resetStats);\n  };\n  \n  // Update statistics when a simulation is completed\n  const updateSimulationStats = (simulationResults, totalQuestions, timeSpentInSeconds) => {\n    const { correctCount } = simulationResults;\n    const score = Math.round((correctCount / totalQuestions) * 100);\n    const isPassed = score >= 70;\n    \n    // Create a record of this test\n    const testRecord = {\n      date: new Date().toISOString(),\n      score,\n      passed: isPassed,\n      correctCount,\n      totalQuestions,\n      timeSpent: timeSpentInSeconds\n    };\n    \n    // Update stats\n    const newStats = {\n      testsTaken: simulationStats.testsTaken + 1,\n      testsPassed: simulationStats.testsPassed + (isPassed ? 1 : 0),\n      totalQuestionsAnswered: simulationStats.totalQuestionsAnswered + Object.keys(userAnswers).length,\n      totalCorrectAnswers: simulationStats.totalCorrectAnswers + correctCount,\n      last10Tests: [testRecord, ...simulationStats.last10Tests].slice(0, 10) // Keep only last 10\n    };\n    \n    saveSimulationStats(newStats);\n  };\n  \n  // Prepare simulation questions by selecting questions from each chapter\n  const prepareSimulationQuestions = useCallback(() => {\n    const chaptersData = Object.keys(allChaptersData);\n    const totalChapters = chaptersData.length;\n    \n    // Calculate how many questions to take from each chapter\n    // We want to distribute questions evenly among chapters\n    const questionsPerChapter = Math.floor(SIMULATION_QUESTIONS_COUNT / totalChapters);\n    const remainder = SIMULATION_QUESTIONS_COUNT % totalChapters;\n    \n    const selectedQuestions = [];\n    let chapterCounts = {};\n    \n    // First, select an equal number of questions from each chapter\n    chaptersData.forEach(chapter => {\n      const chapterQuestions = allChaptersData[chapter];\n      \n      // We need to determine how many questions to take from this chapter\n      const questionsToTake = chapter === chaptersData[0] \n        ? questionsPerChapter + remainder // Add remainder to first chapter\n        : questionsPerChapter;\n      \n      // Get random indices without replacement\n      const indices = getRandomIndices(chapterQuestions.length, questionsToTake);\n      \n      // Select questions using these indices\n      const selectedFromChapter = indices.map(index => ({\n        ...chapterQuestions[index],\n        chapter // Add the chapter info to each question\n      }));\n      \n      // Add to our final array\n      selectedQuestions.push(...selectedFromChapter);\n      \n      // Track how many we took from each chapter\n      chapterCounts[chapter] = questionsToTake;\n    });\n    \n    // Shuffle the combined array to mix questions from different chapters\n    const shuffledQuestions = shuffleArray([...selectedQuestions]);\n    \n    setQuestions(shuffledQuestions);\n    return shuffledQuestions;\n  }, [allChaptersData]);\n  \n  // Initialize simulation\n  const startSimulation = () => {\n    const simulationQuestions = prepareSimulationQuestions();\n    \n    // Reset states\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setSelectedAnswers([]);\n    setTimeSpent(0);\n    setResults(null);\n    \n    // Start the simulation\n    setSimulationState('running');\n  };\n  \n  // Handle time expiration\n  const handleTimeExpired = useCallback(() => {\n    finishSimulation();\n  }, []);\n  \n  // Calculate results and end simulation\n  const finishSimulation = useCallback(() => {\n    // Use the helper function to calculate results\n    const simulationResults = calculateSimulationResults(\n      questions, \n      userAnswers, \n      correctAnswersData, \n      allChaptersData\n    );\n    \n    // Calculate time spent in seconds\n    const timeSpentInSeconds = SIMULATION_TIME_MINUTES * 60 - timeSpent;\n    \n    // Update statistics\n    updateSimulationStats(simulationResults, questions.length, timeSpentInSeconds);\n    \n    // Set the final results\n    setResults(simulationResults);\n    \n    // Mark simulation as completed\n    setSimulationState('completed');\n  }, [questions, userAnswers, correctAnswersData, allChaptersData, timeSpent, SIMULATION_TIME_MINUTES]);\n  \n  // Save answer for current question\n  const saveAnswer = () => {\n    if (selectedAnswers.length === 0) return;\n    \n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: [...selectedAnswers]\n    }));\n    \n    // Move to next question\n    if (currentQuestionIndex < questions.length - 1) {\n      goToNextQuestion();\n    }\n  };\n  \n  // Navigation\n  const goToNextQuestion = () => {\n    setCurrentQuestionIndex(prev => prev + 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex + 1] || []);\n  };\n  \n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prev => prev - 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex - 1] || []);\n  };\n  \n  // Handle answer selection\n  const handleAnswerSelection = (letter) => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      \n      if (index === -1) {\n        // Add selection and sort\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Remove selection\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n  \n  // When the current question changes, load any existing answers\n  useEffect(() => {\n    setSelectedAnswers(userAnswers[currentQuestionIndex] || []);\n  }, [currentQuestionIndex, userAnswers]);\n  \n  // Utility functions\n  const getRandomIndices = (max, count) => {\n    const indices = Array.from({ length: max }, (_, i) => i);\n    return shuffleArray(indices).slice(0, count);\n  };\n  \n  const shuffleArray = (array) => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n  \n  // Render different states\n  if (simulationState === 'intro') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    \n    return (\n      <div className=\"simulation-container\">\n        <div className=\"two-column-layout\">\n          <div className=\"left-column\">\n            <div className=\"simulation-intro\">\n              <h2>Mod Simulare Examen</h2>\n              <div className=\"simulation-info\">\n                <p>Acest mod simulează un examen real cu:</p>\n                <ul>\n                  <li><strong>{SIMULATION_QUESTIONS_COUNT} întrebări</strong> selectate aleatoriu din toate capitolele</li>\n                  <li><strong>{SIMULATION_TIME_MINUTES} minute</strong> timp disponibil ({SIMULATION_TIME_MINUTES / 60} ore)</li>\n                  <li>Distribuție proporțională a întrebărilor între capitole</li>\n                  <li>Posibilitatea de a naviga între întrebări și de a reveni</li>\n                  <li>Rezultat detaliat la final</li>\n                </ul>\n                <p>Ești pregătit să începi?</p>\n              </div>\n              <div className=\"simulation-actions\">\n                <button className=\"btn btn-primary\" onClick={startSimulation}>\n                  Începe Simularea\n                </button>\n                <button className=\"btn btn-secondary\" onClick={onExit}>\n                  Înapoi la Quiz\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"right-column\">\n            {/* Display simulation statistics */}\n            <SimulationStats \n              stats={simulationStats}\n              onResetStats={resetSimulationStats}\n              totalAvailableQuestions={totalAvailableQuestions}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (simulationState === 'completed') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    \n    return (\n      <SimulationResults\n        results={results}\n        totalQuestions={questions.length}\n        timeSpentInSeconds={SIMULATION_TIME_MINUTES * 60 - timeSpent}\n        onRestart={() => setSimulationState('intro')}\n        onExit={onExit}\n        totalAvailableQuestions={totalAvailableQuestions}\n      />\n    );\n  }\n  \n  // Running state\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n  const isAnswered = !!userAnswers[currentQuestionIndex];\n  \n  // Calculate the correct answers from relevant chapter\n  const chapter = currentQuestion?.chapter;\n  const correctAnswers = chapter ? correctAnswersData[chapter] : {};\n  \n  return (\n    <div className=\"simulation-container\">\n      <Timer \n        initialTimeInMinutes={SIMULATION_TIME_MINUTES} \n        onTimeExpired={handleTimeExpired} \n      />\n      \n      <div className=\"simulation-header\">\n        <div className=\"progress-info\">\n          <span>Întrebarea {currentQuestionIndex + 1} din {questions.length}</span>\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        <button \n          className=\"btn btn-finish\" \n          onClick={finishSimulation}\n        >\n          Termină simularea\n        </button>\n      </div>\n      \n      {currentQuestion && (\n        <div className=\"simulation-question\">\n          <QuestionDisplay\n            question={currentQuestion}\n            selectedAnswers={selectedAnswers}\n            onAnswerSelect={handleAnswerSelection}\n            feedback={{ visible: false }}\n            correctAnswer=\"\"\n          />\n          \n          <div className=\"question-status\">\n            <div className=\"status-indicator\">\n              {isAnswered && <span className=\"answered-indicator\">✓ Răspuns salvat</span>}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"simulation-navigation\">\n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToPreviousQuestion}\n          disabled={currentQuestionIndex === 0}\n        >\n          Întrebarea anterioară\n        </button>\n        \n        <button \n          className=\"btn btn-primary\" \n          onClick={saveAnswer}\n          disabled={selectedAnswers.length === 0}\n        >\n          {isAnswered ? 'Actualizează răspunsul' : 'Salvează răspunsul'}\n        </button>\n        \n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToNextQuestion}\n          disabled={currentQuestionIndex === questions.length - 1}\n        >\n          Întrebarea următoare\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Simulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}