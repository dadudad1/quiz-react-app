{"ast":null,"code":"/**\n * Calculate final results for a simulation\n * @param {Array} questions - All questions in the simulation\n * @param {Object} userAnswers - User answers keyed by question index\n * @param {Object} correctAnswersData - Correct answers data keyed by chapter and question number\n * @param {Object} allChaptersData - Object containing all chapters data\n * @returns {Object} Results object with correctCount and resultsByChapter\n */export const calculateSimulationResults=(questions,userAnswers,correctAnswersData,allChaptersData)=>{let correctCount=0;let resultsByChapter={};// Initialize results for each chapter\nObject.keys(allChaptersData).forEach(chapter=>{resultsByChapter[chapter]={total:0,correct:0};});// Evaluate each question\nquestions.forEach((question,index)=>{var _userAnswers$index;const questionNumber=question.numar;const chapter=question.chapter;const correctAnswer=correctAnswersData[chapter][questionNumber]||\"\";const userAnswer=((_userAnswers$index=userAnswers[index])===null||_userAnswers$index===void 0?void 0:_userAnswers$index.join(''))||\"\";// Update totals for this chapter\nresultsByChapter[chapter].total+=1;// Check if answer is correct\nif(userAnswer===correctAnswer){correctCount++;resultsByChapter[chapter].correct+=1;}});return{correctCount,resultsByChapter};};/**\n * Format time in seconds to HH:MM:SS\n * @param {number} seconds - Time in seconds\n * @returns {string} Formatted time string\n */export const formatTime=seconds=>{const hours=Math.floor(seconds/3600);const minutes=Math.floor(seconds%3600/60);const remainingSeconds=seconds%60;return[hours.toString().padStart(2,'0'),minutes.toString().padStart(2,'0'),remainingSeconds.toString().padStart(2,'0')].join(':');};","map":{"version":3,"names":["calculateSimulationResults","questions","userAnswers","correctAnswersData","allChaptersData","correctCount","resultsByChapter","Object","keys","forEach","chapter","total","correct","question","index","_userAnswers$index","questionNumber","numar","correctAnswer","userAnswer","join","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","toString","padStart"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/finishSimulation.js"],"sourcesContent":["/**\n * Calculate final results for a simulation\n * @param {Array} questions - All questions in the simulation\n * @param {Object} userAnswers - User answers keyed by question index\n * @param {Object} correctAnswersData - Correct answers data keyed by chapter and question number\n * @param {Object} allChaptersData - Object containing all chapters data\n * @returns {Object} Results object with correctCount and resultsByChapter\n */\nexport const calculateSimulationResults = (questions, userAnswers, correctAnswersData, allChaptersData) => {\n  let correctCount = 0;\n  let resultsByChapter = {};\n  \n  // Initialize results for each chapter\n  Object.keys(allChaptersData).forEach(chapter => {\n    resultsByChapter[chapter] = { total: 0, correct: 0 };\n  });\n  \n  // Evaluate each question\n  questions.forEach((question, index) => {\n    const questionNumber = question.numar;\n    const chapter = question.chapter;\n    const correctAnswer = correctAnswersData[chapter][questionNumber] || \"\";\n    const userAnswer = userAnswers[index]?.join('') || \"\";\n    \n    // Update totals for this chapter\n    resultsByChapter[chapter].total += 1;\n    \n    // Check if answer is correct\n    if (userAnswer === correctAnswer) {\n      correctCount++;\n      resultsByChapter[chapter].correct += 1;\n    }\n  });\n  \n  return {\n    correctCount,\n    resultsByChapter\n  };\n};\n\n/**\n * Format time in seconds to HH:MM:SS\n * @param {number} seconds - Time in seconds\n * @returns {string} Formatted time string\n */\nexport const formatTime = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n  \n  return [\n    hours.toString().padStart(2, '0'),\n    minutes.toString().padStart(2, '0'),\n    remainingSeconds.toString().padStart(2, '0')\n  ].join(':');\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,0BAA0B,CAAGA,CAACC,SAAS,CAAEC,WAAW,CAAEC,kBAAkB,CAAEC,eAAe,GAAK,CACzG,GAAI,CAAAC,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,gBAAgB,CAAG,CAAC,CAAC,CAEzB;AACAC,MAAM,CAACC,IAAI,CAACJ,eAAe,CAAC,CAACK,OAAO,CAACC,OAAO,EAAI,CAC9CJ,gBAAgB,CAACI,OAAO,CAAC,CAAG,CAAEC,KAAK,CAAE,CAAC,CAAEC,OAAO,CAAE,CAAE,CAAC,CACtD,CAAC,CAAC,CAEF;AACAX,SAAS,CAACQ,OAAO,CAAC,CAACI,QAAQ,CAAEC,KAAK,GAAK,KAAAC,kBAAA,CACrC,KAAM,CAAAC,cAAc,CAAGH,QAAQ,CAACI,KAAK,CACrC,KAAM,CAAAP,OAAO,CAAGG,QAAQ,CAACH,OAAO,CAChC,KAAM,CAAAQ,aAAa,CAAGf,kBAAkB,CAACO,OAAO,CAAC,CAACM,cAAc,CAAC,EAAI,EAAE,CACvE,KAAM,CAAAG,UAAU,CAAG,EAAAJ,kBAAA,CAAAb,WAAW,CAACY,KAAK,CAAC,UAAAC,kBAAA,iBAAlBA,kBAAA,CAAoBK,IAAI,CAAC,EAAE,CAAC,GAAI,EAAE,CAErD;AACAd,gBAAgB,CAACI,OAAO,CAAC,CAACC,KAAK,EAAI,CAAC,CAEpC;AACA,GAAIQ,UAAU,GAAKD,aAAa,CAAE,CAChCb,YAAY,EAAE,CACdC,gBAAgB,CAACI,OAAO,CAAC,CAACE,OAAO,EAAI,CAAC,CACxC,CACF,CAAC,CAAC,CAEF,MAAO,CACLP,YAAY,CACZC,gBACF,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAe,UAAU,CAAIC,OAAO,EAAK,CACrC,KAAM,CAAAC,KAAK,CAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAG,IAAI,CAAC,CACxC,KAAM,CAAAI,OAAO,CAAGF,IAAI,CAACC,KAAK,CAAEH,OAAO,CAAG,IAAI,CAAI,EAAE,CAAC,CACjD,KAAM,CAAAK,gBAAgB,CAAGL,OAAO,CAAG,EAAE,CAErC,MAAO,CACLC,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CACjCH,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CACnCF,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC7C,CAACT,IAAI,CAAC,GAAG,CAAC,CACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}