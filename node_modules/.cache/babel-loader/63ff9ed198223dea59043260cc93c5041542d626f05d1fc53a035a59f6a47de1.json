{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import QuestionDisplay from'./QuestionDisplay';import Timer from'./Timer';import SimulationResults from'./SimulationResults';import SimulationStats from'./SimulationStats';import{calculateSimulationResults,formatTime}from'./finishSimulation';import'../styles/Simulation.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Simulation=_ref=>{let{allChaptersData,correctAnswersData,onExit}=_ref;const SIMULATION_TIME_MINUTES=120;// 2 hours\nconst SIMULATION_QUESTIONS_COUNT=60;// 60 questions\nconst[simulationState,setSimulationState]=useState('intro');// intro, running, completed\nconst[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[userAnswers,setUserAnswers]=useState({});const[selectedAnswers,setSelectedAnswers]=useState([]);const[timeSpent,setTimeSpent]=useState(0);const[results,setResults]=useState(null);const[simulationStats,setSimulationStats]=useState({testsTaken:0,testsPassed:0,totalQuestionsAnswered:0,totalCorrectAnswers:0,last10Tests:[]});// Load simulation statistics from localStorage on mount\nuseEffect(()=>{const savedStats=localStorage.getItem('simulationStats');if(savedStats){try{const stats=JSON.parse(savedStats);setSimulationStats(stats);}catch(e){console.error('Eroare la încărcarea statisticilor de simulare:',e);}}},[]);// Save simulation statistics to localStorage\nconst saveSimulationStats=newStats=>{localStorage.setItem('simulationStats',JSON.stringify(newStats));setSimulationStats(newStats);};// Reset simulation statistics\nconst resetSimulationStats=()=>{const resetStats={testsTaken:0,testsPassed:0,totalQuestionsAnswered:0,totalCorrectAnswers:0,last10Tests:[]};saveSimulationStats(resetStats);};// Update statistics when a simulation is completed\nconst updateSimulationStats=(simulationResults,totalQuestions,timeSpentInSeconds)=>{const{correctCount}=simulationResults;const score=Math.round(correctCount/totalQuestions*100);const isPassed=score>=70;// Create a record of this test\nconst testRecord={date:new Date().toISOString(),score,passed:isPassed,correctCount,totalQuestions,timeSpent:timeSpentInSeconds};// Update stats\nconst newStats={testsTaken:simulationStats.testsTaken+1,testsPassed:simulationStats.testsPassed+(isPassed?1:0),totalQuestionsAnswered:simulationStats.totalQuestionsAnswered+Object.keys(userAnswers).length,totalCorrectAnswers:simulationStats.totalCorrectAnswers+correctCount,last10Tests:[testRecord,...simulationStats.last10Tests].slice(0,10)// Keep only last 10\n};saveSimulationStats(newStats);};// Prepare simulation questions by selecting questions from each chapter\nconst prepareSimulationQuestions=useCallback(()=>{const chaptersData=Object.keys(allChaptersData);const totalChapters=chaptersData.length;// Calculate how many questions to take from each chapter\n// We want to distribute questions evenly among chapters\nconst questionsPerChapter=Math.floor(SIMULATION_QUESTIONS_COUNT/totalChapters);const remainder=SIMULATION_QUESTIONS_COUNT%totalChapters;const selectedQuestions=[];let chapterCounts={};// First, select an equal number of questions from each chapter\nchaptersData.forEach(chapter=>{const chapterQuestions=allChaptersData[chapter];// We need to determine how many questions to take from this chapter\nconst questionsToTake=chapter===chaptersData[0]?questionsPerChapter+remainder// Add remainder to first chapter\n:questionsPerChapter;// Get random indices without replacement\nconst indices=getRandomIndices(chapterQuestions.length,questionsToTake);// Select questions using these indices\nconst selectedFromChapter=indices.map(index=>({...chapterQuestions[index],chapter// Add the chapter info to each question\n}));// Add to our final array\nselectedQuestions.push(...selectedFromChapter);// Track how many we took from each chapter\nchapterCounts[chapter]=questionsToTake;});// Shuffle the combined array to mix questions from different chapters\nconst shuffledQuestions=shuffleArray([...selectedQuestions]);setQuestions(shuffledQuestions);return shuffledQuestions;},[allChaptersData]);// Initialize simulation\nconst startSimulation=()=>{const simulationQuestions=prepareSimulationQuestions();// Reset states\nsetCurrentQuestionIndex(0);setUserAnswers({});setSelectedAnswers([]);setTimeSpent(0);setResults(null);// Start the simulation\nsetSimulationState('running');};// Handle time expiration\nconst handleTimeExpired=useCallback(()=>{finishSimulation();},[]);// Calculate results and end simulation\nconst finishSimulation=useCallback(()=>{// Use the helper function to calculate results\nconst simulationResults=calculateSimulationResults(questions,userAnswers,correctAnswersData,allChaptersData);// Calculate time spent in seconds\nconst timeSpentInSeconds=SIMULATION_TIME_MINUTES*60-timeSpent;// Update statistics\nupdateSimulationStats(simulationResults,questions.length,timeSpentInSeconds);// Set the final results\nsetResults(simulationResults);// Mark simulation as completed\nsetSimulationState('completed');},[questions,userAnswers,correctAnswersData,allChaptersData,timeSpent,SIMULATION_TIME_MINUTES]);// Save answer for current question\nconst saveAnswer=()=>{if(selectedAnswers.length===0)return;setUserAnswers(prev=>({...prev,[currentQuestionIndex]:[...selectedAnswers]}));// Move to next question\nif(currentQuestionIndex<questions.length-1){goToNextQuestion();}};// Navigation\nconst goToNextQuestion=()=>{setCurrentQuestionIndex(prev=>prev+1);setSelectedAnswers(userAnswers[currentQuestionIndex+1]||[]);};const goToPreviousQuestion=()=>{setCurrentQuestionIndex(prev=>prev-1);setSelectedAnswers(userAnswers[currentQuestionIndex-1]||[]);};// Handle answer selection\nconst handleAnswerSelection=letter=>{setSelectedAnswers(prev=>{const index=prev.indexOf(letter);if(index===-1){// Add selection and sort\nconst newSelected=[...prev,letter];newSelected.sort();return newSelected;}else{// Remove selection\nreturn prev.filter(l=>l!==letter);}});};// When the current question changes, load any existing answers\nuseEffect(()=>{setSelectedAnswers(userAnswers[currentQuestionIndex]||[]);},[currentQuestionIndex,userAnswers]);// Utility functions\nconst getRandomIndices=(max,count)=>{const indices=Array.from({length:max},(_,i)=>i);return shuffleArray(indices).slice(0,count);};const shuffleArray=array=>{const newArray=[...array];for(let i=newArray.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[newArray[i],newArray[j]]=[newArray[j],newArray[i]];}return newArray;};// Render different states\nif(simulationState==='intro'){// Calculate total available questions\nconst totalAvailableQuestions=Object.values(allChaptersData).reduce((total,chapterQuestions)=>{return total+chapterQuestions.length;},0);return/*#__PURE__*/_jsx(\"div\",{className:\"simulation-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"two-column-layout\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-column\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-intro\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Mod Simulare Examen\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-info\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Acest mod simuleaz\\u0103 un examen real cu:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[SIMULATION_QUESTIONS_COUNT,\" \\xEEntreb\\u0103ri\"]}),\" selectate aleatoriu din toate capitolele\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[SIMULATION_TIME_MINUTES,\" minute\"]}),\" timp disponibil (\",SIMULATION_TIME_MINUTES/60,\" ore)\"]}),/*#__PURE__*/_jsx(\"li\",{children:\"Distribu\\u021Bie propor\\u021Bional\\u0103 a \\xEEntreb\\u0103rilor \\xEEntre capitole\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Posibilitatea de a naviga \\xEEntre \\xEEntreb\\u0103ri \\u0219i de a reveni\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Rezultat detaliat la final\"})]}),/*#__PURE__*/_jsx(\"p\",{children:\"E\\u0219ti preg\\u0103tit s\\u0103 \\xEEncepi?\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:startSimulation,children:\"\\xCEncepe Simularea\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:onExit,children:\"\\xCEnapoi la Quiz\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-column\",children:/*#__PURE__*/_jsx(SimulationStats,{stats:simulationStats,onResetStats:resetSimulationStats,totalAvailableQuestions:totalAvailableQuestions})})]})});}if(simulationState==='completed'){// Calculate total available questions\nconst totalAvailableQuestions=Object.values(allChaptersData).reduce((total,chapterQuestions)=>{return total+chapterQuestions.length;},0);return/*#__PURE__*/_jsx(SimulationResults,{results:results,totalQuestions:questions.length,timeSpentInSeconds:SIMULATION_TIME_MINUTES*60-timeSpent,onRestart:()=>setSimulationState('intro'),onExit:onExit,totalAvailableQuestions:totalAvailableQuestions});}// Running state\nconst currentQuestion=questions[currentQuestionIndex];const progress=(currentQuestionIndex+1)/questions.length*100;const isAnswered=!!userAnswers[currentQuestionIndex];// Calculate the correct answers from relevant chapter\nconst chapter=currentQuestion===null||currentQuestion===void 0?void 0:currentQuestion.chapter;const correctAnswers=chapter?correctAnswersData[chapter]:{};return/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-container\",children:[/*#__PURE__*/_jsx(Timer,{initialTimeInMinutes:SIMULATION_TIME_MINUTES,onTimeExpired:handleTimeExpired}),/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"progress-info\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"\\xCEntrebarea \",currentQuestionIndex+1,\" din \",questions.length]}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${progress}%`}})})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-finish\",onClick:finishSimulation,children:\"Termin\\u0103 simularea\"})]}),currentQuestion&&/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-question\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chapter-indicator\",children:[\"Capitolul \",currentQuestion.chapter.replace('cap','')]}),/*#__PURE__*/_jsx(QuestionDisplay,{question:currentQuestion,selectedAnswers:selectedAnswers,onAnswerSelect:handleAnswerSelection,feedback:{visible:false},correctAnswer:\"\"}),/*#__PURE__*/_jsx(\"div\",{className:\"question-status\",children:/*#__PURE__*/_jsx(\"div\",{className:\"status-indicator\",children:isAnswered&&/*#__PURE__*/_jsx(\"span\",{className:\"answered-indicator\",children:\"\\u2713 R\\u0103spuns salvat\"})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"simulation-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:goToPreviousQuestion,disabled:currentQuestionIndex===0,children:\"\\xCEntrebarea anterioar\\u0103\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:saveAnswer,disabled:selectedAnswers.length===0,children:isAnswered?'Actualizează răspunsul':'Salvează răspunsul'}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:goToNextQuestion,disabled:currentQuestionIndex===questions.length-1,children:\"\\xCEntrebarea urm\\u0103toare\"})]})]});};export default Simulation;","map":{"version":3,"names":["React","useState","useEffect","useCallback","QuestionDisplay","Timer","SimulationResults","SimulationStats","calculateSimulationResults","formatTime","jsx","_jsx","jsxs","_jsxs","Simulation","_ref","allChaptersData","correctAnswersData","onExit","SIMULATION_TIME_MINUTES","SIMULATION_QUESTIONS_COUNT","simulationState","setSimulationState","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","selectedAnswers","setSelectedAnswers","timeSpent","setTimeSpent","results","setResults","simulationStats","setSimulationStats","testsTaken","testsPassed","totalQuestionsAnswered","totalCorrectAnswers","last10Tests","savedStats","localStorage","getItem","stats","JSON","parse","e","console","error","saveSimulationStats","newStats","setItem","stringify","resetSimulationStats","resetStats","updateSimulationStats","simulationResults","totalQuestions","timeSpentInSeconds","correctCount","score","Math","round","isPassed","testRecord","date","Date","toISOString","passed","Object","keys","length","slice","prepareSimulationQuestions","chaptersData","totalChapters","questionsPerChapter","floor","remainder","selectedQuestions","chapterCounts","forEach","chapter","chapterQuestions","questionsToTake","indices","getRandomIndices","selectedFromChapter","map","index","push","shuffledQuestions","shuffleArray","startSimulation","simulationQuestions","handleTimeExpired","finishSimulation","saveAnswer","prev","goToNextQuestion","goToPreviousQuestion","handleAnswerSelection","letter","indexOf","newSelected","sort","filter","l","max","count","Array","from","_","i","array","newArray","j","random","totalAvailableQuestions","values","reduce","total","className","children","onClick","onResetStats","onRestart","currentQuestion","progress","isAnswered","correctAnswers","initialTimeInMinutes","onTimeExpired","style","width","replace","question","onAnswerSelect","feedback","visible","correctAnswer","disabled"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/Simulation.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport QuestionDisplay from './QuestionDisplay';\nimport Timer from './Timer';\nimport SimulationResults from './SimulationResults';\nimport SimulationStats from './SimulationStats';\nimport { calculateSimulationResults, formatTime } from './finishSimulation';\nimport '../styles/Simulation.css';\n\nconst Simulation = ({ \n  allChaptersData, \n  correctAnswersData,\n  onExit \n}) => {\n  const SIMULATION_TIME_MINUTES = 120; // 2 hours\n  const SIMULATION_QUESTIONS_COUNT = 60; // 60 questions\n  \n  const [simulationState, setSimulationState] = useState('intro'); // intro, running, completed\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [results, setResults] = useState(null);\n  const [simulationStats, setSimulationStats] = useState({\n    testsTaken: 0,\n    testsPassed: 0,\n    totalQuestionsAnswered: 0,\n    totalCorrectAnswers: 0,\n    last10Tests: []\n  });\n  \n  // Load simulation statistics from localStorage on mount\n  useEffect(() => {\n    const savedStats = localStorage.getItem('simulationStats');\n    if (savedStats) {\n      try {\n        const stats = JSON.parse(savedStats);\n        setSimulationStats(stats);\n      } catch (e) {\n        console.error('Eroare la încărcarea statisticilor de simulare:', e);\n      }\n    }\n  }, []);\n  \n  // Save simulation statistics to localStorage\n  const saveSimulationStats = (newStats) => {\n    localStorage.setItem('simulationStats', JSON.stringify(newStats));\n    setSimulationStats(newStats);\n  };\n  \n  // Reset simulation statistics\n  const resetSimulationStats = () => {\n    const resetStats = {\n      testsTaken: 0,\n      testsPassed: 0,\n      totalQuestionsAnswered: 0,\n      totalCorrectAnswers: 0,\n      last10Tests: []\n    };\n    saveSimulationStats(resetStats);\n  };\n  \n  // Update statistics when a simulation is completed\n  const updateSimulationStats = (simulationResults, totalQuestions, timeSpentInSeconds) => {\n    const { correctCount } = simulationResults;\n    const score = Math.round((correctCount / totalQuestions) * 100);\n    const isPassed = score >= 70;\n    \n    // Create a record of this test\n    const testRecord = {\n      date: new Date().toISOString(),\n      score,\n      passed: isPassed,\n      correctCount,\n      totalQuestions,\n      timeSpent: timeSpentInSeconds\n    };\n    \n    // Update stats\n    const newStats = {\n      testsTaken: simulationStats.testsTaken + 1,\n      testsPassed: simulationStats.testsPassed + (isPassed ? 1 : 0),\n      totalQuestionsAnswered: simulationStats.totalQuestionsAnswered + Object.keys(userAnswers).length,\n      totalCorrectAnswers: simulationStats.totalCorrectAnswers + correctCount,\n      last10Tests: [testRecord, ...simulationStats.last10Tests].slice(0, 10) // Keep only last 10\n    };\n    \n    saveSimulationStats(newStats);\n  };\n  \n  // Prepare simulation questions by selecting questions from each chapter\n  const prepareSimulationQuestions = useCallback(() => {\n    const chaptersData = Object.keys(allChaptersData);\n    const totalChapters = chaptersData.length;\n    \n    // Calculate how many questions to take from each chapter\n    // We want to distribute questions evenly among chapters\n    const questionsPerChapter = Math.floor(SIMULATION_QUESTIONS_COUNT / totalChapters);\n    const remainder = SIMULATION_QUESTIONS_COUNT % totalChapters;\n    \n    const selectedQuestions = [];\n    let chapterCounts = {};\n    \n    // First, select an equal number of questions from each chapter\n    chaptersData.forEach(chapter => {\n      const chapterQuestions = allChaptersData[chapter];\n      \n      // We need to determine how many questions to take from this chapter\n      const questionsToTake = chapter === chaptersData[0] \n        ? questionsPerChapter + remainder // Add remainder to first chapter\n        : questionsPerChapter;\n      \n      // Get random indices without replacement\n      const indices = getRandomIndices(chapterQuestions.length, questionsToTake);\n      \n      // Select questions using these indices\n      const selectedFromChapter = indices.map(index => ({\n        ...chapterQuestions[index],\n        chapter // Add the chapter info to each question\n      }));\n      \n      // Add to our final array\n      selectedQuestions.push(...selectedFromChapter);\n      \n      // Track how many we took from each chapter\n      chapterCounts[chapter] = questionsToTake;\n    });\n    \n    // Shuffle the combined array to mix questions from different chapters\n    const shuffledQuestions = shuffleArray([...selectedQuestions]);\n    \n    setQuestions(shuffledQuestions);\n    return shuffledQuestions;\n  }, [allChaptersData]);\n  \n  // Initialize simulation\n  const startSimulation = () => {\n    const simulationQuestions = prepareSimulationQuestions();\n    \n    // Reset states\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setSelectedAnswers([]);\n    setTimeSpent(0);\n    setResults(null);\n    \n    // Start the simulation\n    setSimulationState('running');\n  };\n  \n  // Handle time expiration\n  const handleTimeExpired = useCallback(() => {\n    finishSimulation();\n  }, []);\n  \n  // Calculate results and end simulation\n  const finishSimulation = useCallback(() => {\n    // Use the helper function to calculate results\n    const simulationResults = calculateSimulationResults(\n      questions, \n      userAnswers, \n      correctAnswersData, \n      allChaptersData\n    );\n    \n    // Calculate time spent in seconds\n    const timeSpentInSeconds = SIMULATION_TIME_MINUTES * 60 - timeSpent;\n    \n    // Update statistics\n    updateSimulationStats(simulationResults, questions.length, timeSpentInSeconds);\n    \n    // Set the final results\n    setResults(simulationResults);\n    \n    // Mark simulation as completed\n    setSimulationState('completed');\n  }, [questions, userAnswers, correctAnswersData, allChaptersData, timeSpent, SIMULATION_TIME_MINUTES]);\n  \n  // Save answer for current question\n  const saveAnswer = () => {\n    if (selectedAnswers.length === 0) return;\n    \n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: [...selectedAnswers]\n    }));\n    \n    // Move to next question\n    if (currentQuestionIndex < questions.length - 1) {\n      goToNextQuestion();\n    }\n  };\n  \n  // Navigation\n  const goToNextQuestion = () => {\n    setCurrentQuestionIndex(prev => prev + 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex + 1] || []);\n  };\n  \n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prev => prev - 1);\n    setSelectedAnswers(userAnswers[currentQuestionIndex - 1] || []);\n  };\n  \n  // Handle answer selection\n  const handleAnswerSelection = (letter) => {\n    setSelectedAnswers(prev => {\n      const index = prev.indexOf(letter);\n      \n      if (index === -1) {\n        // Add selection and sort\n        const newSelected = [...prev, letter];\n        newSelected.sort();\n        return newSelected;\n      } else {\n        // Remove selection\n        return prev.filter(l => l !== letter);\n      }\n    });\n  };\n  \n  // When the current question changes, load any existing answers\n  useEffect(() => {\n    setSelectedAnswers(userAnswers[currentQuestionIndex] || []);\n  }, [currentQuestionIndex, userAnswers]);\n  \n  // Utility functions\n  const getRandomIndices = (max, count) => {\n    const indices = Array.from({ length: max }, (_, i) => i);\n    return shuffleArray(indices).slice(0, count);\n  };\n  \n  const shuffleArray = (array) => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n  \n  // Render different states\n  if (simulationState === 'intro') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    \n    return (\n      <div className=\"simulation-container\">\n        <div className=\"two-column-layout\">\n          <div className=\"left-column\">\n            <div className=\"simulation-intro\">\n              <h2>Mod Simulare Examen</h2>\n              <div className=\"simulation-info\">\n                <p>Acest mod simulează un examen real cu:</p>\n                <ul>\n                  <li><strong>{SIMULATION_QUESTIONS_COUNT} întrebări</strong> selectate aleatoriu din toate capitolele</li>\n                  <li><strong>{SIMULATION_TIME_MINUTES} minute</strong> timp disponibil ({SIMULATION_TIME_MINUTES / 60} ore)</li>\n                  <li>Distribuție proporțională a întrebărilor între capitole</li>\n                  <li>Posibilitatea de a naviga între întrebări și de a reveni</li>\n                  <li>Rezultat detaliat la final</li>\n                </ul>\n                <p>Ești pregătit să începi?</p>\n              </div>\n              <div className=\"simulation-actions\">\n                <button className=\"btn btn-primary\" onClick={startSimulation}>\n                  Începe Simularea\n                </button>\n                <button className=\"btn btn-secondary\" onClick={onExit}>\n                  Înapoi la Quiz\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"right-column\">\n            {/* Display simulation statistics */}\n            <SimulationStats \n              stats={simulationStats}\n              onResetStats={resetSimulationStats}\n              totalAvailableQuestions={totalAvailableQuestions}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (simulationState === 'completed') {\n    // Calculate total available questions\n    const totalAvailableQuestions = Object.values(allChaptersData).reduce((total, chapterQuestions) => {\n      return total + chapterQuestions.length;\n    }, 0);\n    \n    return (\n      <SimulationResults\n        results={results}\n        totalQuestions={questions.length}\n        timeSpentInSeconds={SIMULATION_TIME_MINUTES * 60 - timeSpent}\n        onRestart={() => setSimulationState('intro')}\n        onExit={onExit}\n        totalAvailableQuestions={totalAvailableQuestions}\n      />\n    );\n  }\n  \n  // Running state\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n  const isAnswered = !!userAnswers[currentQuestionIndex];\n  \n  // Calculate the correct answers from relevant chapter\n  const chapter = currentQuestion?.chapter;\n  const correctAnswers = chapter ? correctAnswersData[chapter] : {};\n  \n  return (\n    <div className=\"simulation-container\">\n      <Timer \n        initialTimeInMinutes={SIMULATION_TIME_MINUTES} \n        onTimeExpired={handleTimeExpired} \n      />\n      \n      <div className=\"simulation-header\">\n        <div className=\"progress-info\">\n          <span>Întrebarea {currentQuestionIndex + 1} din {questions.length}</span>\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        <button \n          className=\"btn btn-finish\" \n          onClick={finishSimulation}\n        >\n          Termină simularea\n        </button>\n      </div>\n      \n      {currentQuestion && (\n        <div className=\"simulation-question\">\n          <div className=\"chapter-indicator\">\n            Capitolul {currentQuestion.chapter.replace('cap', '')}\n          </div>\n          <QuestionDisplay\n            question={currentQuestion}\n            selectedAnswers={selectedAnswers}\n            onAnswerSelect={handleAnswerSelection}\n            feedback={{ visible: false }}\n            correctAnswer=\"\"\n          />\n          \n          <div className=\"question-status\">\n            <div className=\"status-indicator\">\n              {isAnswered && <span className=\"answered-indicator\">✓ Răspuns salvat</span>}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"simulation-navigation\">\n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToPreviousQuestion}\n          disabled={currentQuestionIndex === 0}\n        >\n          Întrebarea anterioară\n        </button>\n        \n        <button \n          className=\"btn btn-primary\" \n          onClick={saveAnswer}\n          disabled={selectedAnswers.length === 0}\n        >\n          {isAnswered ? 'Actualizează răspunsul' : 'Salvează răspunsul'}\n        </button>\n        \n        <button \n          className=\"btn btn-secondary\" \n          onClick={goToNextQuestion}\n          disabled={currentQuestionIndex === questions.length - 1}\n        >\n          Întrebarea următoare\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Simulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}