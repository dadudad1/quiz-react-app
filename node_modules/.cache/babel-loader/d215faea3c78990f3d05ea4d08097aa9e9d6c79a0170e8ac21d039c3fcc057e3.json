{"ast":null,"code":"var _jsxFileName = \"/Users/dragosudrea/repos/quiz-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport QuizContainer from './components/QuizContainer';\nimport Statistics from './components/Statistics';\nimport LoadingOverlay from './components/LoadingOverlay';\nimport Simulation from './components/Simulation';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for app mode and chapter selection\n  const [appMode, setAppMode] = useState('quiz'); // 'quiz' or 'simulation'\n  const [activeChapter, setActiveChapter] = useState('cap1');\n\n  // State for question sets\n  const [questions, setQuestions] = useState([]);\n  const [questionsChapter2, setQuestionsChapter2] = useState([]);\n  const [questionsChapter3, setQuestionsChapter3] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n\n  // State for correct answers from all chapters\n  const [correctAnswers, setCorrectAnswers] = useState({});\n  const [correctAnswersChapter2, setCorrectAnswersChapter2] = useState({});\n  const [correctAnswersChapter3, setCorrectAnswersChapter3] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({\n    correctCount: 0,\n    totalCount: 0,\n    bookmarkedCount: 0\n  });\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\n  const [error, setError] = useState(null);\n\n  // Încărcăm răspunsurile corecte pentru capitolul 1\n  useEffect(() => {\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\n    const answers = {};\n    answersData.split('; ').forEach(item => {\n      const parts = item.split('.');\n      if (parts.length === 2) {\n        const questionNumber = parseInt(parts[0]);\n        const answer = parts[1];\n        answers[questionNumber] = answer;\n      }\n    });\n    setCorrectAnswers(answers);\n  }, []);\n\n  // Încărcăm răspunsurile corecte pentru capitolul 2\n  useEffect(() => {\n    const answersData2 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\n    const answers = {};\n    answersData2.split('; ').forEach(item => {\n      const parts = item.split('.');\n      if (parts.length === 2) {\n        const questionNumber = parseInt(parts[0]);\n        const answer = parts[1];\n        answers[questionNumber] = answer;\n      }\n    });\n    setCorrectAnswersChapter2(answers);\n  }, []);\n\n  // Încărcăm răspunsurile corecte pentru capitolul 3\n  useEffect(() => {\n    const answersData3 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\n    const answers = {};\n    answersData3.split('; ').forEach(item => {\n      const parts = item.split('.');\n      if (parts.length === 2) {\n        const questionNumber = parseInt(parts[0]);\n        const answer = parts[1];\n        answers[questionNumber] = answer;\n      }\n    });\n    setCorrectAnswersChapter3(answers);\n  }, []);\n\n  // Încărcăm întrebările din JSON pentru capitolul 1\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch('./questions.json');\n        if (!response.ok) {\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 1');\n        }\n        const data = await response.json();\n        setQuestions(data);\n\n        // Initialize filtered questions based on active chapter\n        if (activeChapter === 'cap1') {\n          setFilteredQuestions(data);\n        }\n        setIsLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Încărcăm întrebările din JSON pentru capitolul 2\n  useEffect(() => {\n    const fetchQuestionsChapter2 = async () => {\n      try {\n        const response = await fetch('./cap2.json');\n        if (!response.ok) {\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 2');\n        }\n        const data = await response.json();\n        setQuestionsChapter2(data);\n\n        // Initialize filtered questions based on active chapter\n        if (activeChapter === 'cap2') {\n          setFilteredQuestions(data);\n        }\n\n        // If chapter 1 failed to load, we can use chapter 2 as default\n        if (questions.length === 0 && activeChapter === 'cap1') {\n          setActiveChapter('cap2');\n          setFilteredQuestions(data);\n        }\n      } catch (err) {\n        console.error('Eroare la încărcarea întrebărilor din capitolul 2:', err);\n        // Don't set error state here to avoid blocking the whole app\n        // if just chapter 2 fails to load\n      }\n    };\n    fetchQuestionsChapter2();\n  }, [questions]); // Depends on questions to ensure proper ordering\n\n  // Încărcăm întrebările din JSON pentru capitolul 3\n  useEffect(() => {\n    const fetchQuestionsChapter3 = async () => {\n      try {\n        const response = await fetch('./cap3.json');\n        if (!response.ok) {\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 3');\n        }\n        const data = await response.json();\n        setQuestionsChapter3(data);\n\n        // Initialize filtered questions based on active chapter\n        if (activeChapter === 'cap3') {\n          setFilteredQuestions(data);\n        }\n      } catch (err) {\n        console.error('Eroare la încărcarea întrebărilor din capitolul 3:', err);\n        // Don't set error state here to avoid blocking the whole app\n        // if just chapter 3 fails to load\n      }\n    };\n    fetchQuestionsChapter3();\n  }, [questionsChapter2]); // Depends on chapter 2 loading to ensure proper ordering\n\n  // Încărcăm întrebările salvate din localStorage\n  useEffect(() => {\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\n    if (savedBookmarks) {\n      try {\n        const bookmarks = JSON.parse(savedBookmarks);\n        setBookmarkedQuestions(new Set(bookmarks));\n        setStats(prev => ({\n          ...prev,\n          bookmarkedCount: bookmarks.length\n        }));\n      } catch (e) {\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\n      }\n    }\n  }, []);\n\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\n  useEffect(() => {\n    setStats(prev => ({\n      ...prev,\n      bookmarkedCount: bookmarkedQuestions.size\n    }));\n\n    // Salvăm întrebările marcate în localStorage\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\n  }, [bookmarkedQuestions]);\n\n  // Funcția pentru schimbarea modului aplicației\n  const switchAppMode = mode => {\n    setAppMode(mode);\n  };\n\n  // Funcția pentru schimbarea capitolului activ\n  const switchChapter = chapter => {\n    setActiveChapter(chapter);\n\n    // Update filtered questions based on active chapter\n    if (chapter === 'cap1') {\n      setFilteredQuestions(questions);\n    } else if (chapter === 'cap2') {\n      setFilteredQuestions(questionsChapter2);\n    } else if (chapter === 'cap3') {\n      setFilteredQuestions(questionsChapter3);\n    }\n  };\n\n  // Funcția de căutare în întrebări\n  const searchQuestions = query => {\n    if (!query.trim()) {\n      // Reset based on active chapter\n      if (activeChapter === 'cap1') {\n        setFilteredQuestions([...questions]);\n      } else if (activeChapter === 'cap2') {\n        setFilteredQuestions([...questionsChapter2]);\n      } else if (activeChapter === 'cap3') {\n        setFilteredQuestions([...questionsChapter3]);\n      }\n      return true;\n    }\n    query = query.toLowerCase();\n\n    // Select the appropriate question set based on active chapter\n    let currentQuestions;\n    if (activeChapter === 'cap1') {\n      currentQuestions = questions;\n    } else if (activeChapter === 'cap2') {\n      currentQuestions = questionsChapter2;\n    } else if (activeChapter === 'cap3') {\n      currentQuestions = questionsChapter3;\n    }\n    const filtered = currentQuestions.filter(q => {\n      // Căutăm după numărul întrebării\n      if (q.numar.toString() === query) {\n        return true;\n      }\n\n      // Căutăm în textul întrebării\n      if (q.intrebare.toLowerCase().includes(query)) {\n        return true;\n      }\n\n      // Căutăm în variante\n      for (const text of Object.values(q.variante)) {\n        if (text.toLowerCase().includes(query)) {\n          return true;\n        }\n      }\n      return false;\n    });\n    setFilteredQuestions(filtered);\n    return filtered.length > 0;\n  };\n\n  // Funcția pentru actualizarea statisticilor\n  const updateStats = isCorrect => {\n    setStats(prev => ({\n      ...prev,\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\n      totalCount: prev.totalCount + 1\n    }));\n  };\n\n  // Funcția pentru resetarea statisticilor\n  const resetStats = () => {\n    setStats(prev => ({\n      ...prev,\n      correctCount: 0,\n      totalCount: 0\n    }));\n  };\n\n  // Funcția pentru toggle bookmark\n  const toggleBookmark = questionNumber => {\n    setBookmarkedQuestions(prev => {\n      const newBookmarks = new Set(prev);\n      if (newBookmarks.has(questionNumber)) {\n        newBookmarks.delete(questionNumber);\n      } else {\n        newBookmarks.add(questionNumber);\n      }\n      return newBookmarks;\n    });\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Eroare: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Prepare data for simulation mode\n  const allChaptersData = {\n    cap1: questions,\n    cap2: questionsChapter2,\n    cap3: questionsChapter3\n  };\n  const correctAnswersData = {\n    cap1: correctAnswers,\n    cap2: correctAnswersChapter2,\n    cap3: correctAnswersChapter3\n  };\n\n  // Get the correct answers based on active chapter\n  let currentAnswers;\n  let currentQuestionSet;\n  if (activeChapter === 'cap1') {\n    currentAnswers = correctAnswers;\n    currentQuestionSet = questions;\n  } else if (activeChapter === 'cap2') {\n    currentAnswers = correctAnswersChapter2;\n    currentQuestionSet = questionsChapter2;\n  } else if (activeChapter === 'cap3') {\n    currentAnswers = correctAnswersChapter3;\n    currentQuestionSet = questionsChapter3;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz Biologie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-mode-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `mode-btn ${appMode === 'quiz' ? 'active' : ''}`,\n          onClick: () => switchAppMode('quiz'),\n          children: \"Mod Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `mode-btn ${appMode === 'simulation' ? 'active' : ''}`,\n          onClick: () => switchAppMode('simulation'),\n          children: \"Simulare Examen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), appMode === 'quiz' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chapter-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `chapter-btn ${activeChapter === 'cap1' ? 'active' : ''}`,\n          onClick: () => switchChapter('cap1'),\n          children: \"Capitolul 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `chapter-btn ${activeChapter === 'cap2' ? 'active' : ''}`,\n          onClick: () => switchChapter('cap2'),\n          children: \"Capitolul 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `chapter-btn ${activeChapter === 'cap3' ? 'active' : ''}`,\n          onClick: () => switchChapter('cap3'),\n          children: \"Capitolul 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: appMode === 'quiz' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(QuizContainer, {\n          questions: currentQuestionSet,\n          filteredQuestions: filteredQuestions,\n          correctAnswers: currentAnswers,\n          bookmarkedQuestions: bookmarkedQuestions,\n          updateStats: updateStats,\n          toggleBookmark: toggleBookmark,\n          searchQuestions: searchQuestions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n          correctCount: stats.correctCount,\n          totalCount: stats.totalCount,\n          bookmarkedCount: stats.bookmarkedCount,\n          resetStats: resetStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Simulation, {\n        allChaptersData: allChaptersData,\n        correctAnswersData: correctAnswersData,\n        onExit: () => switchAppMode('quiz')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"App-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2023 Quiz Biologie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zJdYlJvoitVaV6bIUg6bS7a0itk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","QuizContainer","Statistics","LoadingOverlay","Simulation","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","appMode","setAppMode","activeChapter","setActiveChapter","questions","setQuestions","questionsChapter2","setQuestionsChapter2","questionsChapter3","setQuestionsChapter3","filteredQuestions","setFilteredQuestions","correctAnswers","setCorrectAnswers","correctAnswersChapter2","setCorrectAnswersChapter2","correctAnswersChapter3","setCorrectAnswersChapter3","isLoading","setIsLoading","stats","setStats","correctCount","totalCount","bookmarkedCount","bookmarkedQuestions","setBookmarkedQuestions","Set","error","setError","answersData","answers","split","forEach","item","parts","length","questionNumber","parseInt","answer","answersData2","answersData3","fetchQuestions","response","fetch","ok","Error","data","json","err","message","fetchQuestionsChapter2","console","fetchQuestionsChapter3","savedBookmarks","localStorage","getItem","bookmarks","JSON","parse","prev","e","size","setItem","stringify","switchAppMode","mode","switchChapter","chapter","searchQuestions","query","trim","toLowerCase","currentQuestions","filtered","filter","q","numar","toString","intrebare","includes","text","Object","values","variante","updateStats","isCorrect","resetStats","toggleBookmark","newBookmarks","has","delete","add","fileName","_jsxFileName","lineNumber","columnNumber","className","children","allChaptersData","cap1","cap2","cap3","correctAnswersData","currentAnswers","currentQuestionSet","onClick","onExit","_c","$RefreshReg$"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport QuizContainer from './components/QuizContainer';\r\nimport Statistics from './components/Statistics';\r\nimport LoadingOverlay from './components/LoadingOverlay';\r\nimport Simulation from './components/Simulation';\r\n\r\nfunction App() {\r\n  // State for app mode and chapter selection\r\n  const [appMode, setAppMode] = useState('quiz'); // 'quiz' or 'simulation'\r\n  const [activeChapter, setActiveChapter] = useState('cap1');\r\n  \r\n  // State for question sets\r\n  const [questions, setQuestions] = useState([]);\r\n  const [questionsChapter2, setQuestionsChapter2] = useState([]);\r\n  const [questionsChapter3, setQuestionsChapter3] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  \r\n  // State for correct answers from all chapters\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [correctAnswersChapter2, setCorrectAnswersChapter2] = useState({});\r\n  const [correctAnswersChapter3, setCorrectAnswersChapter3] = useState({});\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    correctCount: 0,\r\n    totalCount: 0,\r\n    bookmarkedCount: 0\r\n  });\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\r\n  const [error, setError] = useState(null);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 1\r\n  useEffect(() => {\r\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\r\n    \r\n    const answers = {};\r\n    answersData.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswers(answers);\r\n  }, []);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 2\r\n  useEffect(() => {\r\n    const answersData2 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\r\n    \r\n    const answers = {};\r\n    answersData2.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswersChapter2(answers);\r\n  }, []);\r\n\r\n  // Încărcăm răspunsurile corecte pentru capitolul 3\r\n  useEffect(() => {\r\n    const answersData3 = \"1.ADE; 2.AE; 3.ABE; 4.ABE; 5.ACE; 6.ABE; 7.ADE; 8.BCD; 9.BDE; 10.ACE; 11.ADE; 12.BCE; 13.BDE; 14.BCD; 15.BDE; 16.ABD; 17.ACDE; 18.BD; 19.ACE; 20.ACD; 21.BE; 22.ABD; 23.CE; 24.ACD; 25.ABE; 26.ACD; 27.ACDE; 28.BCE; 29.BE; 30.ABE; 31.ADE; 32.CD; 33.BD; 34.D; 35.BD; 36.ABE; 37.BCD; 38.BDE; 39.ADE; 40.ADE; 41.ACE; 42.ACDE; 43.ABE; 44.ADE; 45.BD; 46.ABE; 47.CD; 48.AD; 49.BDE; 50.ACE; 51.BCE; 52.BCD; 53.BCDE; 54.C; 55.BCE; 56.AD; 57.ACE; 58.BCE; 59.ABD; 60.BCE; 61.ACE; 62.AD; 63.ABD; 64.ACE; 65.ACE; 66.ACDE; 67.ADE; 68.ABD; 69.BCD; 70.ACD; 71.BD; 72.ABE; 73.BCE; 74.AD; 75.ACE; 76.BCE; 77.ABE; 78.BC; 79.BDE; 80.BE; 81.CE; 82.ACD; 83.ABD; 84.ABDE; 85.BCD; 86.CD; 87.AE; 88.BCD; 89.ACE; 90.CE; 91.BCD; 92.ABE; 93.BDE; 94.ABE; 95.DE; 96.BCD; 97.ABD; 98.ACE; 99.BCE; 100.ACE; 101.BCD; 102.BDE; 103.BCD; 104.BCD; 105.BCE; 106.BDE; 107.ACE; 108.ADE; 109.ACE; 110.ACD; 111.ACDE; 112.BCE; 113.BCE; 114.BCE; 115.BCDE; 116.ABD; 117.ACE; 118.BE; 119.BD; 120.ACD; 121.ABE; 122.ACE; 123.BCE; 124.ABE; 125.ACE; 126.ACD; 127.ACD; 128.ABD; 129.BCE; 130.BCE; 131.D; 132.DE; 133.AD; 134.BCD; 135.BCE; 136.ABCE; 137.BDE; 138.BDE; 139.BCD; 140.BCE; 141.ACD; 142.BCE; 143.CDE; 144.ACDE; 145.BDE; 146.BCD; 147.CDE; 148.AD; 149.BC; 150.ACD; 151.ACE; 152.AD; 153.ACE; 154.ACDE; 155.BCD; 156.ABDE; 157.ABE; 158.BCD; 159.ABD; 160.BCD; 161.AD; 162.ADE; 163.BCD; 164.AC; 165.BDE; 166.CDE; 167.ABC; 168.ADE; 169.BC; 170.BDE; 171.BDE; 172.ADE; 173.BDE; 174.ABE; 175.BCD; 176.BCE; 177.BCD; 178.ACE; 179.ACE; 180.ACD; 181.ABDE; 182.BE; 183.ACE; 184.CE; 185.CDE; 186.ACDE; 187.ABE; 188.BCD; 189.ACE; 190.ACD\";\r\n    \r\n    const answers = {};\r\n    answersData3.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswersChapter3(answers);\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 1\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch('./questions.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 1');\r\n        }\r\n        const data = await response.json();\r\n        setQuestions(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap1') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 2\r\n  useEffect(() => {\r\n    const fetchQuestionsChapter2 = async () => {\r\n      try {\r\n        const response = await fetch('./cap2.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 2');\r\n        }\r\n        const data = await response.json();\r\n        setQuestionsChapter2(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap2') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n        // If chapter 1 failed to load, we can use chapter 2 as default\r\n        if (questions.length === 0 && activeChapter === 'cap1') {\r\n          setActiveChapter('cap2');\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Eroare la încărcarea întrebărilor din capitolul 2:', err);\r\n        // Don't set error state here to avoid blocking the whole app\r\n        // if just chapter 2 fails to load\r\n      }\r\n    };\r\n\r\n    fetchQuestionsChapter2();\r\n  }, [questions]); // Depends on questions to ensure proper ordering\r\n\r\n  // Încărcăm întrebările din JSON pentru capitolul 3\r\n  useEffect(() => {\r\n    const fetchQuestionsChapter3 = async () => {\r\n      try {\r\n        const response = await fetch('./cap3.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările din capitolul 3');\r\n        }\r\n        const data = await response.json();\r\n        setQuestionsChapter3(data);\r\n        \r\n        // Initialize filtered questions based on active chapter\r\n        if (activeChapter === 'cap3') {\r\n          setFilteredQuestions(data);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Eroare la încărcarea întrebărilor din capitolul 3:', err);\r\n        // Don't set error state here to avoid blocking the whole app\r\n        // if just chapter 3 fails to load\r\n      }\r\n    };\r\n\r\n    fetchQuestionsChapter3();\r\n  }, [questionsChapter2]); // Depends on chapter 2 loading to ensure proper ordering\r\n\r\n  // Încărcăm întrebările salvate din localStorage\r\n  useEffect(() => {\r\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\r\n    if (savedBookmarks) {\r\n      try {\r\n        const bookmarks = JSON.parse(savedBookmarks);\r\n        setBookmarkedQuestions(new Set(bookmarks));\r\n        setStats(prev => ({\r\n          ...prev,\r\n          bookmarkedCount: bookmarks.length\r\n        }));\r\n      } catch (e) {\r\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\r\n  useEffect(() => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      bookmarkedCount: bookmarkedQuestions.size\r\n    }));\r\n    \r\n    // Salvăm întrebările marcate în localStorage\r\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\r\n  }, [bookmarkedQuestions]);\r\n\r\n  // Funcția pentru schimbarea modului aplicației\r\n  const switchAppMode = (mode) => {\r\n    setAppMode(mode);\r\n  };\r\n\r\n  // Funcția pentru schimbarea capitolului activ\r\n  const switchChapter = (chapter) => {\r\n    setActiveChapter(chapter);\r\n    \r\n    // Update filtered questions based on active chapter\r\n    if (chapter === 'cap1') {\r\n      setFilteredQuestions(questions);\r\n    } else if (chapter === 'cap2') {\r\n      setFilteredQuestions(questionsChapter2);\r\n    } else if (chapter === 'cap3') {\r\n      setFilteredQuestions(questionsChapter3);\r\n    }\r\n  };\r\n\r\n  // Funcția de căutare în întrebări\r\n  const searchQuestions = (query) => {\r\n    if (!query.trim()) {\r\n      // Reset based on active chapter\r\n      if (activeChapter === 'cap1') {\r\n        setFilteredQuestions([...questions]);\r\n      } else if (activeChapter === 'cap2') {\r\n        setFilteredQuestions([...questionsChapter2]);\r\n      } else if (activeChapter === 'cap3') {\r\n        setFilteredQuestions([...questionsChapter3]);\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    query = query.toLowerCase();\r\n    \r\n    // Select the appropriate question set based on active chapter\r\n    let currentQuestions;\r\n    if (activeChapter === 'cap1') {\r\n      currentQuestions = questions;\r\n    } else if (activeChapter === 'cap2') {\r\n      currentQuestions = questionsChapter2;\r\n    } else if (activeChapter === 'cap3') {\r\n      currentQuestions = questionsChapter3;\r\n    }\r\n    \r\n    const filtered = currentQuestions.filter(q => {\r\n      // Căutăm după numărul întrebării\r\n      if (q.numar.toString() === query) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în textul întrebării\r\n      if (q.intrebare.toLowerCase().includes(query)) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în variante\r\n      for (const text of Object.values(q.variante)) {\r\n        if (text.toLowerCase().includes(query)) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    });\r\n    \r\n    setFilteredQuestions(filtered);\r\n    \r\n    return filtered.length > 0;\r\n  };\r\n\r\n  // Funcția pentru actualizarea statisticilor\r\n  const updateStats = (isCorrect) => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\r\n      totalCount: prev.totalCount + 1\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru resetarea statisticilor\r\n  const resetStats = () => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: 0,\r\n      totalCount: 0\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru toggle bookmark\r\n  const toggleBookmark = (questionNumber) => {\r\n    setBookmarkedQuestions(prev => {\r\n      const newBookmarks = new Set(prev);\r\n      if (newBookmarks.has(questionNumber)) {\r\n        newBookmarks.delete(questionNumber);\r\n      } else {\r\n        newBookmarks.add(questionNumber);\r\n      }\r\n      return newBookmarks;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <LoadingOverlay />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">Eroare: {error}</div>;\r\n  }\r\n\r\n  // Prepare data for simulation mode\r\n  const allChaptersData = {\r\n    cap1: questions,\r\n    cap2: questionsChapter2,\r\n    cap3: questionsChapter3\r\n  };\r\n  \r\n  const correctAnswersData = {\r\n    cap1: correctAnswers,\r\n    cap2: correctAnswersChapter2,\r\n    cap3: correctAnswersChapter3\r\n  };\r\n  \r\n  // Get the correct answers based on active chapter\r\n  let currentAnswers;\r\n  let currentQuestionSet;\r\n  \r\n  if (activeChapter === 'cap1') {\r\n    currentAnswers = correctAnswers;\r\n    currentQuestionSet = questions;\r\n  } else if (activeChapter === 'cap2') {\r\n    currentAnswers = correctAnswersChapter2;\r\n    currentQuestionSet = questionsChapter2;\r\n  } else if (activeChapter === 'cap3') {\r\n    currentAnswers = correctAnswersChapter3;\r\n    currentQuestionSet = questionsChapter3;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Quiz Biologie</h1>\r\n        \r\n        <div className=\"app-mode-selector\">\r\n          <button \r\n            className={`mode-btn ${appMode === 'quiz' ? 'active' : ''}`}\r\n            onClick={() => switchAppMode('quiz')}\r\n          >\r\n            Mod Quiz\r\n          </button>\r\n          <button \r\n            className={`mode-btn ${appMode === 'simulation' ? 'active' : ''}`}\r\n            onClick={() => switchAppMode('simulation')}\r\n          >\r\n            Simulare Examen\r\n          </button>\r\n        </div>\r\n        \r\n        {appMode === 'quiz' && (\r\n          <div className=\"chapter-selector\">\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap1' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap1')}\r\n            >\r\n              Capitolul 1\r\n            </button>\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap2' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap2')}\r\n            >\r\n              Capitolul 2\r\n            </button>\r\n            <button \r\n              className={`chapter-btn ${activeChapter === 'cap3' ? 'active' : ''}`}\r\n              onClick={() => switchChapter('cap3')}\r\n            >\r\n              Capitolul 3\r\n            </button>\r\n          </div>\r\n        )}\r\n      </header>\r\n      \r\n      <main>\r\n        {appMode === 'quiz' ? (\r\n          <>\r\n            <QuizContainer\r\n              questions={currentQuestionSet}\r\n              filteredQuestions={filteredQuestions}\r\n              correctAnswers={currentAnswers}\r\n              bookmarkedQuestions={bookmarkedQuestions}\r\n              updateStats={updateStats}\r\n              toggleBookmark={toggleBookmark}\r\n              searchQuestions={searchQuestions}\r\n            />\r\n            <Statistics\r\n              correctCount={stats.correctCount}\r\n              totalCount={stats.totalCount}\r\n              bookmarkedCount={stats.bookmarkedCount}\r\n              resetStats={resetStats}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Simulation \r\n            allChaptersData={allChaptersData}\r\n            correctAnswersData={correctAnswersData}\r\n            onExit={() => switchAppMode('quiz')}\r\n          />\r\n        )}\r\n      </main>\r\n      \r\n      <footer className=\"App-footer\">\r\n        <p>© 2023 Quiz Biologie</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}