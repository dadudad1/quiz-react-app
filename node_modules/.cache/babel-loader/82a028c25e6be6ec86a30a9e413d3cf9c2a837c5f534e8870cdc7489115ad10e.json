{"ast":null,"code":"/**\n * Calculate final results for a simulation\n * @param {Array} questions - All questions in the simulation\n * @param {Object} userAnswers - User answers keyed by question index\n * @param {Object} correctAnswersData - Correct answers data keyed by chapter and question number\n * @param {Object} allChaptersData - Object containing all chapters data\n * @returns {Object} Results object with correctCount and resultsByChapter\n */\nexport const calculateSimulationResults = (questions, userAnswers, correctAnswersData, allChaptersData) => {\n  let correctCount = 0;\n  let resultsByChapter = {};\n\n  // Initialize results for each chapter\n  Object.keys(allChaptersData).forEach(chapter => {\n    resultsByChapter[chapter] = {\n      total: 0,\n      correct: 0\n    };\n  });\n\n  // Evaluate each question\n  questions.forEach((question, index) => {\n    var _userAnswers$index;\n    const questionNumber = question.numar;\n    const chapter = question.chapter;\n    const correctAnswer = correctAnswersData[chapter][questionNumber] || \"\";\n    const userAnswer = ((_userAnswers$index = userAnswers[index]) === null || _userAnswers$index === void 0 ? void 0 : _userAnswers$index.join('')) || \"\";\n\n    // Update totals for this chapter\n    resultsByChapter[chapter].total += 1;\n\n    // Check if answer is correct\n    if (userAnswer === correctAnswer) {\n      correctCount++;\n      resultsByChapter[chapter].correct += 1;\n    }\n  });\n  return {\n    correctCount,\n    resultsByChapter\n  };\n};\n\n/**\n * Format time in seconds to HH:MM:SS\n * @param {number} seconds - Time in seconds\n * @returns {string} Formatted time string\n */\nexport const formatTime = seconds => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const remainingSeconds = seconds % 60;\n  return [hours.toString().padStart(2, '0'), minutes.toString().padStart(2, '0'), remainingSeconds.toString().padStart(2, '0')].join(':');\n};","map":{"version":3,"names":["calculateSimulationResults","questions","userAnswers","correctAnswersData","allChaptersData","correctCount","resultsByChapter","Object","keys","forEach","chapter","total","correct","question","index","_userAnswers$index","questionNumber","numar","correctAnswer","userAnswer","join","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","toString","padStart"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/components/finishSimulation.js"],"sourcesContent":["/**\n * Calculate final results for a simulation\n * @param {Array} questions - All questions in the simulation\n * @param {Object} userAnswers - User answers keyed by question index\n * @param {Object} correctAnswersData - Correct answers data keyed by chapter and question number\n * @param {Object} allChaptersData - Object containing all chapters data\n * @returns {Object} Results object with correctCount and resultsByChapter\n */\nexport const calculateSimulationResults = (questions, userAnswers, correctAnswersData, allChaptersData) => {\n  let correctCount = 0;\n  let resultsByChapter = {};\n  \n  // Initialize results for each chapter\n  Object.keys(allChaptersData).forEach(chapter => {\n    resultsByChapter[chapter] = { total: 0, correct: 0 };\n  });\n  \n  // Evaluate each question\n  questions.forEach((question, index) => {\n    const questionNumber = question.numar;\n    const chapter = question.chapter;\n    const correctAnswer = correctAnswersData[chapter][questionNumber] || \"\";\n    const userAnswer = userAnswers[index]?.join('') || \"\";\n    \n    // Update totals for this chapter\n    resultsByChapter[chapter].total += 1;\n    \n    // Check if answer is correct\n    if (userAnswer === correctAnswer) {\n      correctCount++;\n      resultsByChapter[chapter].correct += 1;\n    }\n  });\n  \n  return {\n    correctCount,\n    resultsByChapter\n  };\n};\n\n/**\n * Format time in seconds to HH:MM:SS\n * @param {number} seconds - Time in seconds\n * @returns {string} Formatted time string\n */\nexport const formatTime = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n  \n  return [\n    hours.toString().padStart(2, '0'),\n    minutes.toString().padStart(2, '0'),\n    remainingSeconds.toString().padStart(2, '0')\n  ].join(':');\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAA0B,GAAGA,CAACC,SAAS,EAAEC,WAAW,EAAEC,kBAAkB,EAAEC,eAAe,KAAK;EACzG,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,gBAAgB,GAAG,CAAC,CAAC;;EAEzB;EACAC,MAAM,CAACC,IAAI,CAACJ,eAAe,CAAC,CAACK,OAAO,CAACC,OAAO,IAAI;IAC9CJ,gBAAgB,CAACI,OAAO,CAAC,GAAG;MAAEC,KAAK,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC;EACtD,CAAC,CAAC;;EAEF;EACAX,SAAS,CAACQ,OAAO,CAAC,CAACI,QAAQ,EAAEC,KAAK,KAAK;IAAA,IAAAC,kBAAA;IACrC,MAAMC,cAAc,GAAGH,QAAQ,CAACI,KAAK;IACrC,MAAMP,OAAO,GAAGG,QAAQ,CAACH,OAAO;IAChC,MAAMQ,aAAa,GAAGf,kBAAkB,CAACO,OAAO,CAAC,CAACM,cAAc,CAAC,IAAI,EAAE;IACvE,MAAMG,UAAU,GAAG,EAAAJ,kBAAA,GAAAb,WAAW,CAACY,KAAK,CAAC,cAAAC,kBAAA,uBAAlBA,kBAAA,CAAoBK,IAAI,CAAC,EAAE,CAAC,KAAI,EAAE;;IAErD;IACAd,gBAAgB,CAACI,OAAO,CAAC,CAACC,KAAK,IAAI,CAAC;;IAEpC;IACA,IAAIQ,UAAU,KAAKD,aAAa,EAAE;MAChCb,YAAY,EAAE;MACdC,gBAAgB,CAACI,OAAO,CAAC,CAACE,OAAO,IAAI,CAAC;IACxC;EACF,CAAC,CAAC;EAEF,OAAO;IACLP,YAAY;IACZC;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,UAAU,GAAIC,OAAO,IAAK;EACrC,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,IAAI,CAAC;EACxC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;EACjD,MAAMK,gBAAgB,GAAGL,OAAO,GAAG,EAAE;EAErC,OAAO,CACLC,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EACjCH,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EACnCF,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAC7C,CAACT,IAAI,CAAC,GAAG,CAAC;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}