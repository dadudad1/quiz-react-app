{"ast":null,"code":"var _jsxFileName = \"/Users/dragosudrea/repos/quiz-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport QuizContainer from './components/QuizContainer';\nimport Statistics from './components/Statistics';\nimport LoadingOverlay from './components/LoadingOverlay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n  const [correctAnswers, setCorrectAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({\n    correctCount: 0,\n    totalCount: 0,\n    bookmarkedCount: 0\n  });\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\n  const [error, setError] = useState(null);\n\n  // Încărcăm răspunsurile corecte din datele cap1_raspunsuri\n  useEffect(() => {\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\n    const answers = {};\n    answersData.split('; ').forEach(item => {\n      const parts = item.split('.');\n      if (parts.length === 2) {\n        const questionNumber = parseInt(parts[0]);\n        const answer = parts[1];\n        answers[questionNumber] = answer;\n      }\n    });\n    setCorrectAnswers(answers);\n  }, []);\n\n  // Încărcăm întrebările din JSON\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch('./questions.json');\n        if (!response.ok) {\n          throw new Error('Nu s-au putut încărca întrebările');\n        }\n        const data = await response.json();\n        setQuestions(data);\n        setFilteredQuestions(data);\n        setIsLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Încărcăm întrebările salvate din localStorage\n  useEffect(() => {\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\n    if (savedBookmarks) {\n      try {\n        const bookmarks = JSON.parse(savedBookmarks);\n        setBookmarkedQuestions(new Set(bookmarks));\n        setStats(prev => ({\n          ...prev,\n          bookmarkedCount: bookmarks.length\n        }));\n      } catch (e) {\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\n      }\n    }\n  }, []);\n\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\n  useEffect(() => {\n    setStats(prev => ({\n      ...prev,\n      bookmarkedCount: bookmarkedQuestions.size\n    }));\n\n    // Salvăm întrebările marcate în localStorage\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\n  }, [bookmarkedQuestions]);\n\n  // Funcția de căutare în întrebări\n  const searchQuestions = query => {\n    if (!query.trim()) {\n      setFilteredQuestions([...questions]);\n      return true;\n    }\n    query = query.toLowerCase();\n    const filtered = questions.filter(q => {\n      // Căutăm în textul întrebării\n      if (q.intrebare.toLowerCase().includes(query)) {\n        return true;\n      }\n\n      // Căutăm în variante\n      for (const text of Object.values(q.variante)) {\n        if (text.toLowerCase().includes(query)) {\n          return true;\n        }\n      }\n      return false;\n    });\n    setFilteredQuestions(filtered);\n    return filtered.length > 0;\n  };\n\n  // Funcția pentru actualizarea statisticilor\n  const updateStats = isCorrect => {\n    setStats(prev => ({\n      ...prev,\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\n      totalCount: prev.totalCount + 1\n    }));\n  };\n\n  // Funcția pentru resetarea statisticilor\n  const resetStats = () => {\n    setStats(prev => ({\n      ...prev,\n      correctCount: 0,\n      totalCount: 0\n    }));\n  };\n\n  // Funcția pentru toggle bookmark\n  const toggleBookmark = questionNumber => {\n    setBookmarkedQuestions(prev => {\n      const newBookmarks = new Set(prev);\n      if (newBookmarks.has(questionNumber)) {\n        newBookmarks.delete(questionNumber);\n      } else {\n        newBookmarks.add(questionNumber);\n      }\n      return newBookmarks;\n    });\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Eroare: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz Biologie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(QuizContainer, {\n        questions: questions,\n        filteredQuestions: filteredQuestions,\n        correctAnswers: correctAnswers,\n        bookmarkedQuestions: bookmarkedQuestions,\n        updateStats: updateStats,\n        toggleBookmark: toggleBookmark,\n        searchQuestions: searchQuestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        correctCount: stats.correctCount,\n        totalCount: stats.totalCount,\n        bookmarkedCount: stats.bookmarkedCount,\n        resetStats: resetStats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"App-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2023 Quiz Biologie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lDmsF5PwHJlibmuSUQjfRmojqPA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","QuizContainer","Statistics","LoadingOverlay","jsxDEV","_jsxDEV","App","_s","questions","setQuestions","filteredQuestions","setFilteredQuestions","correctAnswers","setCorrectAnswers","isLoading","setIsLoading","stats","setStats","correctCount","totalCount","bookmarkedCount","bookmarkedQuestions","setBookmarkedQuestions","Set","error","setError","answersData","answers","split","forEach","item","parts","length","questionNumber","parseInt","answer","fetchQuestions","response","fetch","ok","Error","data","json","err","message","savedBookmarks","localStorage","getItem","bookmarks","JSON","parse","prev","e","console","size","setItem","stringify","searchQuestions","query","trim","toLowerCase","filtered","filter","q","intrebare","includes","text","Object","values","variante","updateStats","isCorrect","resetStats","toggleBookmark","newBookmarks","has","delete","add","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/dragosudrea/repos/quiz-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport QuizContainer from './components/QuizContainer';\r\nimport Statistics from './components/Statistics';\r\nimport LoadingOverlay from './components/LoadingOverlay';\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    correctCount: 0,\r\n    totalCount: 0,\r\n    bookmarkedCount: 0\r\n  });\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState(new Set());\r\n  const [error, setError] = useState(null);\r\n\r\n  // Încărcăm răspunsurile corecte din datele cap1_raspunsuri\r\n  useEffect(() => {\r\n    const answersData = \"1.ACE; 2.CDE; 3.ABE; 4.ABE; 5.ADE; 6.BDE; 7.ACD; 8.BDE; 9.ABDE; 10.ACE; 11.BDE; 12.ACD; 13.ADE; 14.ACD; 15.BDE; 16.ABCE; 17.AE; 18.BCDE; 19.BE; 20.CDE; 21.ABD; 22.ACE; 23.BCD; 24.ACD; 25.CDE; 26.ACD; 27.CE; 28.BD; 29.CDE; 30.ACD; 31.E; 32.ACD; 33.BDE; 34.ACDE; 35.BD; 36.ABCE; 37.BCE; 38.ACD; 39.BCE; 40.ABD; 41.CDE; 42.BD; 43.CDE; 44.ABE; 45.ABC; 46.BCD; 47.ABE; 48.ADE; 49.BCE; 50.ABD; 51.BCE; 52.BCE; 53.ACE; 54.ABD; 55.ACD; 56.AE; 57.ABE; 58.ACD; 59.ACDE; 60.ACE; 61.BDE; 62.ABE; 63.CD; 64.ABCD; 65.BCD; 66.ACE; 67.ACE; 68.ABD; 69.BDE; 70.ABC; 71.BCE; 72.BDE; 73.ACE; 74.BD; 75.ACDE; 76.ABD; 77.BCE; 78.ACE; 79.BCE; 80.ABCE; 81.ACD; 82.ACD; 83.BDE; 84.ABDE; 85.ABE 86.ACE; 87.ACE; 88.ABE; 89.AD; 90.BCD; 91.BDE; 92.BCE; 93.ACE; 94.ABE; 95.ADE; 96.ABC; 97.BE; 98.ABE; 99.ACDE; 100.ABE; 101.CDE; 102.ACD; 103.ADE; 104.ABD; 105.ACDE; 106.AD; 107.BDE; 108.ABE; 109.ACE; 110.CDE; 111.CDE; 112.ADE; 113.ACE; 114.ACE; 115.ACE; 116.ACD; 117.ACE; 118.BE; 119.ABCE; 120.ACE; 121.ACE; 122.BCD; 123.BCE; 124.ACE; 125.BDE; 126.AC; 127.CDE; 128.ADE; 129.CE; 130.ABD; 131.ACD; 132.BCE; 133.B; 134.BE; 135.ADE; 136.ABCE; 137.BC; 138.CDE; 139.ABE; 140.BDE; 141.ACD; 142.BCE; 143.BCE; 144.CDE; 145.BD; 146.ABDE; 147.ACE; 148.ABD; 149.BDE; 150.ACE; 151.ACDE; 152.BCD; 153.ADE; 154.CDE; 155.BCE; 156.AC; 157.ACD; 158.BDE; 159.BDE; 160.BCE; 161.ACD; 162.ACE; 163.AC; 164.ACD; 165.BCE; 166.ABCD; 167.CE; 168.ABCE; 169.ABCE; 170.BCE; 171.ACE; 172.BDE; 173.CDE; 174.ABE; 175.BCE; 176.ABE; 177.BDE; 178.ABD; 179.ACD; 180.BDE; 181.ADE; 182.CDE; 183.BDE; 184.ACE; 185.BCD; 186.ABE; 187.BCE; 188.BCD; 189.ADE; 190.ADE; 191.ACD; 192.BCD; 193.ACE; 194.BCD; 195.ADE; 196.ABE; 197.BCDE; 198.ACD; 199.BDE; 200.ADE\";\r\n    \r\n    const answers = {};\r\n    answersData.split('; ').forEach(item => {\r\n      const parts = item.split('.');\r\n      if (parts.length === 2) {\r\n        const questionNumber = parseInt(parts[0]);\r\n        const answer = parts[1];\r\n        answers[questionNumber] = answer;\r\n      }\r\n    });\r\n    \r\n    setCorrectAnswers(answers);\r\n  }, []);\r\n\r\n  // Încărcăm întrebările din JSON\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch('./questions.json');\r\n        if (!response.ok) {\r\n          throw new Error('Nu s-au putut încărca întrebările');\r\n        }\r\n        const data = await response.json();\r\n        setQuestions(data);\r\n        setFilteredQuestions(data);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  // Încărcăm întrebările salvate din localStorage\r\n  useEffect(() => {\r\n    const savedBookmarks = localStorage.getItem('bookmarkedQuestions');\r\n    if (savedBookmarks) {\r\n      try {\r\n        const bookmarks = JSON.parse(savedBookmarks);\r\n        setBookmarkedQuestions(new Set(bookmarks));\r\n        setStats(prev => ({\r\n          ...prev,\r\n          bookmarkedCount: bookmarks.length\r\n        }));\r\n      } catch (e) {\r\n        console.error('Eroare la încărcarea întrebărilor salvate:', e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Actualizăm numărul de întrebări salvate când se modifică bookmarkedQuestions\r\n  useEffect(() => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      bookmarkedCount: bookmarkedQuestions.size\r\n    }));\r\n    \r\n    // Salvăm întrebările marcate în localStorage\r\n    localStorage.setItem('bookmarkedQuestions', JSON.stringify([...bookmarkedQuestions]));\r\n  }, [bookmarkedQuestions]);\r\n\r\n  // Funcția de căutare în întrebări\r\n  const searchQuestions = (query) => {\r\n    if (!query.trim()) {\r\n      setFilteredQuestions([...questions]);\r\n      return true;\r\n    }\r\n    \r\n    query = query.toLowerCase();\r\n    const filtered = questions.filter(q => {\r\n      // Căutăm în textul întrebării\r\n      if (q.intrebare.toLowerCase().includes(query)) {\r\n        return true;\r\n      }\r\n      \r\n      // Căutăm în variante\r\n      for (const text of Object.values(q.variante)) {\r\n        if (text.toLowerCase().includes(query)) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    });\r\n    \r\n    setFilteredQuestions(filtered);\r\n    \r\n    return filtered.length > 0;\r\n  };\r\n\r\n  // Funcția pentru actualizarea statisticilor\r\n  const updateStats = (isCorrect) => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: isCorrect ? prev.correctCount + 1 : prev.correctCount,\r\n      totalCount: prev.totalCount + 1\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru resetarea statisticilor\r\n  const resetStats = () => {\r\n    setStats(prev => ({\r\n      ...prev,\r\n      correctCount: 0,\r\n      totalCount: 0\r\n    }));\r\n  };\r\n\r\n  // Funcția pentru toggle bookmark\r\n  const toggleBookmark = (questionNumber) => {\r\n    setBookmarkedQuestions(prev => {\r\n      const newBookmarks = new Set(prev);\r\n      if (newBookmarks.has(questionNumber)) {\r\n        newBookmarks.delete(questionNumber);\r\n      } else {\r\n        newBookmarks.add(questionNumber);\r\n      }\r\n      return newBookmarks;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <LoadingOverlay />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">Eroare: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Quiz Biologie</h1>\r\n      </header>\r\n      <main>\r\n        <QuizContainer\r\n          questions={questions}\r\n          filteredQuestions={filteredQuestions}\r\n          correctAnswers={correctAnswers}\r\n          bookmarkedQuestions={bookmarkedQuestions}\r\n          updateStats={updateStats}\r\n          toggleBookmark={toggleBookmark}\r\n          searchQuestions={searchQuestions}\r\n        />\r\n        <Statistics\r\n          correctCount={stats.correctCount}\r\n          totalCount={stats.totalCount}\r\n          bookmarkedCount={stats.bookmarkedCount}\r\n          resetStats={resetStats}\r\n        />\r\n      </main>\r\n      <footer className=\"App-footer\">\r\n        <p>© 2023 Quiz Biologie</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}